
NAME

    TString::init


SYNOPSIS

    TInteger TString::init(TInteger size, TInteger initialValue)


DESCRIPTION

    Initialize a string. The string is changed after calling


ARGUMENTS

    size: size of initialization

    initalValue: value of char of the string


RETURN

    0


EXAMPLES

    var TString s = 'aaa';
    s.init(10,`b`);
    assert(s == 'bbbbbbbbbb');

NAME

    strlen, binlen, TString::length


SYNOPSIS

    TInteger strlen(TString s)
    TInteger binlen(TString s)
    TInteger TString::length()


DESCRIPTION

    Get the length of a string. binlen and TString::length return the whole 
    length of a binary string. strlen only counts the characters before the 
    first null character


ARGUMENTS

    s: The string


RETURN

    The string length


EXAMPLES

    assert(strlen('12345') == 5);
    assert(binlen('ABC\00ABC\00') == 8);
    assert(strlen('ABC\00ABC\00') == 3); // the first \00 as the string 
    end

NAME

    strcat


SYNOPSIS

    TString strcat(TString arg1 ,TString arg2)
    result = arg1 + arg2


DESCRIPTION

    String concatenation. Not only strcat but also '+' operator can be used 
    for this function


ARGUMENTS

    arg1: The first string

    arg2: The second string


RETURN

    The new string after concatenation


EXAMPLES

    var TString s = strcat('a', 'b');
    assert(s == 'ab');
    s = s + s;
    assert(s == 'abab');

NAME

    str0cat


SYNOPSIS

    TString  str0cat(TString arg1, TString arg2)


DESCRIPTION

    String concatenation. A null character will be added between the two 
    strings


ARGUMENTS

    arg1: The first string

    arg2: The second string


RETURN

    A new string after concatenation


EXAMPLES

    var TString s = str0cat('aaa', 'bbb');
    assert(s == 'aaa\00bbb');

NAME

    strstr, strcasestr


SYNOPSIS

    TString strstr(TString arg1 ,TString arg2)
    TString strcasestr (TString arg1 ,TString arg2)


DESCRIPTION

    Search a string from another string. strstr is case sensitive, strcasestr 
    is not case sensitive


ARGUMENTS

    arg1: The source string

    arg2: The string to search


RETURN

    Return a new string that is a part of the source string from the first 
    occurrence of the string to search to the end of the source string


EXAMPLES

    assert(strstr('abcd', 'c') == 'cd');
    assert(strcasestr('abCd', 'c') == 'Cd');

NAME

    substr, TString::substr


SYNOPSIS

    TString substr (TString str, TInteger start, TInteger length=-1)
    TString TString::substr (TInteger start, TInteger length=-1)


DESCRIPTION

    Get a new substring from a string according to the length and the beginning 
    index


ARGUMENTS

    str: source string

    start: The beginning index:
    Greater than or equal to 0, count from the begin of the source string,
     0 is the first, 1 is the second
    Less than 0, count from the end of the source string, -1 is the first 
    one, -2 is the second one...

    length: The max length, default -1 for infinity


RETURN

    The new substring


EXAMPLES

    assert(substr('abcde', 2, 3) == 'cde');
    assert(substr('abcde', -2, 3) == 'bcd');
    assert('12345678'.substr(0,3) == '123');
    assert('12345678'.substr(1,10) == '2345678');
    assert('12345678'.substr(1) == '2345678');
    assert('12345678'.substr(10,2) == '');
    assert('12345678'.substr(-1) == '12345678');
    assert('12345678'.substr(-1,3) == '678');
    assert('12345678'.substr(-3,3) == '456');
    assert('12345678'.substr(-3,10) == '123456');
    assert('12345678'.substr(-10,3) == '');
    assert('12345678'.substr(-7,5) == '12');
    assert('12345678'.substr(-5) == '1234');
    assert('12345678'.substr(-1,9) == '12345678');
    assert('12345678'.substr(-1,8) == '12345678');

NAME

    strxchar


SYNOPSIS

    TString  strxchar( TString arg1)


DESCRIPTION

    Exchange each pair of character of a string. Normally, the length of 
    the string is even. If the length is odd, character '0' will be appended 
    before exchanging


ARGUMENTS

    arg1: source string


RETURN

    new string after exchanging


EXAMPLES

    assert(strxchar('1234') == '2143')
    assert(strxchar('123')=='2103');
    assert(strxchar('1')=='01');
    assert(strxchar('')=='');

NAME

    ltrim, rtrim, trim


SYNOPSIS

    TString  ltrim (TString s)
    TString  rtrim (TString s)
    TString  trim (TString s)


DESCRIPTION

    Trim a string. Function ltrim delete the left space character of the 
    string, Function rtrim delete the right space character of the string.
     Function trim not only delete the left and right space character but 
    also replace the multi-space to one space in the string


ARGUMENTS

    s: Source string to trim


RETURN

    A new string after trim


EXAMPLES

    assert(ltrim('  abc') == 'abc');
    assert(rtrim(' abc  ') == ' abc');
    assert(trim('  ab  cd  ') == 'ab cd');

NAME

    lower, upper


SYNOPSIS

    TString lower(TString s)
    TString upper(TString s)


DESCRIPTION

    Lowercase or uppercase converting. Function lower returns the string 
    converted to all lowercase. Function upper returns the string converted 
    to all uppercase


ARGUMENTS

    s: Source string to be converted


RETURN

    A new string after converted


EXAMPLES

    assert(lower('Abc') == 'abc');
    assert(upper('abC ') == 'ABC');

NAME

    TString::foreachbyte


SYNOPSIS

    TString::foreachbyte(TString operater, TInteger value)


DESCRIPTION

    To do an operation for each byte of a string. This function can be used 
    for simple string encryption/decryption


ARGUMENTS

    operator: operator, can be
    '+' for addition
    '-' for subtraction
    '*' for multiplication
    '/' for division
    '%' for mod
    '&' for AND
    '|' for OR
    or an up-arrow for XOR
    

    value: operation value


RETURN

    0


EXAMPLES

    var TString s;
    s.init(10, `A`);
    assert(s == 'AAAAAAAAAA');
    s.foreachbyte('+', 3);
    assert(s == 'DDDDDDDDDD');
    s.foreachbyte('-', 1);
    assert(s == 'CCCCCCCCCC');

NAME

    pickword


SYNOPSIS

    TString  pickword(TString str, TString sepStr, TInteger index)


DESCRIPTION

    To pick sub-string from a string according to the separator string.

    

ARGUMENTS

    str: Source string

    sepStr: Separation string

    index: An integer for index. If a string can be split into N sub-string 
    by a separator string, the index can be between 0 and N-1. 
    If index is bigger than N-1, a null string will be returned.
    If index is -1, index will be assumed a random integer between 0 and 
    N-1


RETURN

    The sub-string that is picked


EXAMPLES

    assert(pickword('aaa/bbb/ccc/ddd ', '/', 2) == 'ccc');
    var s = pickword('aaa/bbb/ccc/ddd ', '/', -1); // random return
    assert(s == 'aaa' || s == 'bbb' || s == 'ccc' || s == 'ddd');

NAME

    alignstr


SYNOPSIS

    TString alignstr(TString arg1, TString arg2, TInteger i)


DESCRIPTION

    To align a string


ARGUMENTS

    arg1: The string to be processed

    arg2: The character to be aligned

    i: The alignment length. Negative integer indicates a left-aligned, 
    positive number indicates a right-aligned. If the length of the string 
    that you want to process is greater than the alignment length, only the 
    alignment length can be returned the remain characters is truncated


RETURN

    A new string


EXAMPLES

    assert(alignstr('1100', 'F',6) == 'FF1100');
    assert(alignstr('1100', 'F',3) == '100');
    assert(alignstr('1100', 'F',4) == '1100');
    assert(alignstr('1100', 'F',-6) == '1100FF');
    assert(alignstr('1100', 'F',-3) == '110');
    assert(alignstr('1100', 'F',-4) == '1100');

NAME

    sprintf, sprintbin


SYNOPSIS

    TString  sprintf(TString format£¬...)
    TString  sprintbin(TString binStr)


DESCRIPTION

    sprintf is to construct a new string according to the format and some 
    arguments. It is very similar to the printf function in C language. sprintbin 
    is to convert a string that may include non-printable characters to a 
    printable string.


ARGUMENTS

    format: Same as the format argument of sprintf function as C language

    
    binStr: A string that may include non-printable characters

    ...: Integer or string, The maximum is 30


RETURN

    A new string


EXAMPLES

    var TString s1 = 'aaa';
    var TString s2 = 'bbb';
    var TString s = sprintf('%s%s',s1,s2);
    assert(s == 'aaabbb');
    
    var TString binStr = 'abc\00\00\01\01abc';
    print(sprintbin(binStr));
    // may output:
    // 0     61 62 63 00 00 01 01 61  62 63                     abc....abc

NAME

    sscanf


SYNOPSIS

    TInteger sscanf(TString strSrc, TString format, ...)


DESCRIPTION

    sscanf parse all fiels by space. The source can not be changed


ARGUMENTS

    strSrc: source string

    format: Same as the format argument of sprintf function as C language

    
    ...: Integer or string, The maximum is 80


RETURN

    return parsed characters


EXAMPLES

    var TString str1;
       var TString str2;
       var TString str3;
       str1=¡¯how are you¡¯;
       sscanf(str1,¡¯%s %s %s¡¯,str2,str3);
       ......
    
       ±¾Àý·µ»Østr2=how, str3=are you

NAME

    strtoargvs, TString::split


SYNOPSIS

    TInteger strtoargvs(TString str, TInteger beginArgv)
    TString[] TString::split(TString dataBegin='', TString dataEnd='')


DESCRIPTION

    strtoargvs() is to split a string to the static variable argv. The separator 
    is space, enter or table character. TString::split() can split string 
    using the same rule, but the result is a TString array


ARGUMENTS

    str: the string to be split

    beginArgvi: the first argv index to save the split result. For example,
     3 indicates the first splitting result saved into variable argv3

    dataBegin: no-parse section begin flag. default is a null string that 
    means the flag is same as the xml standard

    dataEnd: no-parse section end flag. The section between dataBegin and 
    dataEnd will not be parsed and the separator will be ignored. default 
    is a null string that mains same as dataBegin or same as xml standard.
    


RETURN

    strtoargv() returns the number of strings split. TString::split() returns 
    a TString array


EXAMPLES

    s = 'a b cc 00123';
    i = strtoargvs(s,3);
    assert(i == 4);
    assert(argv3 == 'a');
    assert(argv4 == 'b');
    assert(argv5 == 'cc');
    assert(argv6 == '00123');
    assert(argv7 == '');
    
    var TString s3 = 'aaa bbb    ccc     ddd\neee <!CDATA[[a a a a a]]>fff 
    gg';
    var TString s4[] = s3.split();
    assert(s4.length()==8, itoa(s4.length()));
    assert(s4[0]=='aaa', s4[0]);
    assert(s4[1]=='bbb', s4[1]);
    assert(s4[2]=='ccc', s4[2]);
    assert(s4[3]=='ddd', s4[3]);
    assert(s4[4]=='eee', s4[4]);
    assert(s4[5]=='a a a a a', s4[5]);
    assert(s4[6]=='fff', s4[6]);
    assert(s4[7]=='gg', s4[7]);
    
    assert('111 222 222'.split()[1]=='222');
    assert('111 "222 222"'.split('"')[1]=='222 222');
    assert('111 <222 222>'.split('<', '>')[1]=='222 222');

NAME

    trimfloatstr


SYNOPSIS

    TString  trimfloatstr (TString arg1, TInteger i)


DESCRIPTION

    To append some '0' characters at the end of a string


ARGUMENTS

    arg1: the source string

    i: i is the number of '0' characters to append if i is positive and 
    a dot will be append first before '0' if i is negative


RETURN

    converted string


EXAMPLES

    assert(trimfloatstr ('126', 2) == '12600');
    assert(trimfloatstr ('126', -2) == '126.00');

NAME

    strreplace, TString::replace


SYNOPSIS

    TString strreplace(TString source, TString from, TString to)
    TInteger TString::replace(TString from, TString to)


DESCRIPTION

    To find a sub-string from a string and replace all found sub-string 
    to a new string. The finding is case sensitive and support string including 
    character 0. strreplace() function dose not change the source string 
    and returns a new string. TString::replace() changes the source string

    

ARGUMENTS

    source: source string

    from: the sub-string to be found

    to: the objective sub-string replaced


RETURN

    strreplace() returns a new string. TString::replace returns 0


EXAMPLES

    assert(strreplace('abcdABcd','ab','cc') == 'cccdABcd');
    s='111111';
    s.replace('1', '2');
    assert(s == '222222');
    s.replace('2', '\00\01');
    assert(s == '\00\01\00\01\00\01\00\01\00\01\00\01');
    s.replace('\01', '\02\03');
    assert(s == '\00\02\03\00\02\03\00\02\03\00\02\03\00\02\03\00\02\03'
    );

NAME

    strhtmlwrap, htmltextencode


SYNOPSIS

    TString strhtmlwrap(TString s)
    TString htmltextencode(TString s, TInteger type=7)


DESCRIPTION

    strhtmlwrap() will replace the enter in the text to <br>. This function 
    used to generate a text include enter and embedded it into the html. 
    If the text includes not only enter but also other special character,
     htmltextencode() function can replace these special character to html 
    entity.


ARGUMENTS

    s: The text to be processed

    type: If type is 7, 7 characters include ampersand, less-than sign, 
    greater-than sign, apostrophe, double quote, space, enter wull be processed.
     If type is 5, only ampersand, less-than sign, greater-than sign, apostrophe,
     double quote will be processed. The default value is 7


RETURN

    a new string. Note: htmltextencode() replaces the enter to <br> and 
    not delete the enter character


EXAMPLES

    var TString s = 'lkjsaf\nasdlkfsdf\naslkdjfh\n asdlkfjhsadf\nasdlfk\
    n';
    s = strhtmlwrap(s);
    assert(s == 'lkjsaf<br>asdlkfsdf<br>aslkdjfh<br> asdlkfjhsadf<br>asdlfk<
    br>');
    s = 'ab\nc&def<g>\n';
    assert(htmltextencode(s) == 'ab<br>\nc&amp;def&lt;g&gt;<br>\n');
    assert(htmltextencode(s,5) == 'ab\nc&amp;def&lt;g&gt;\n');

NAME

    TString::getbyte, TString::setbyte


SYNOPSIS

    TInteger TString::getbyte(TInteger index)
    TInteger TString::setbyte(TInteger index, TInteger value)


DESCRIPTION

    To get or set a byte value of a string. getbyte() is to get a byte value.
     setbyte() is to get a byte value


ARGUMENTS

    index: integer. The index must be greater than or equal to 0 and less 
    than the string length

    value: integer. It is the byte value to set


RETURN

    A negative integer is returned for failure. If success, getbyte() returns 
    a byte value between 0-255 and setbyte() returns 0


EXAMPLES

    var TString s='12345';
    assert(s.getbyte(2) == 51);
    s.setbyte(1,51);
    assert(s == '13345');

NAME

    TString::cuthead


SYNOPSIS

    TString TString::cuthead(TString sepFlag)


DESCRIPTION

    To cut the head part of a string according to the separator. The cut 
    part (not include the separator) is returned. If the separator cannot 
    be found, the whole string will be returned and the source string is 
    set to null


ARGUMENTS

    sepFlag: The separator string


RETURN

    The cut string


EXAMPLES

    var TString s='123 456';
    s1 = s.cuthead(' ');
    assert(s == '456');
    assert(s1 == '123');
    s1 = s.cuthead('A');
    assert(s == '');
    assert(s1 == '456');

NAME

    TString::hashcode


SYNOPSIS

    TInteger TString::hashcode()


DESCRIPTION

    Get a hash result for a string


ARGUMENTS

    ÎÞ

RETURN

    An integer hash result


EXAMPLES

    var TString str1;
    var TInteger itmp;
    ......
    str1='233a';
    itmp = str1.hashcode();

NAME

    atoi, atoi2, atoi16


SYNOPSIS

    TInteger atoi(TString intstr)
    TInteger atoi2(TString intstr)
    TInteger atoi16(TString intstr)


DESCRIPTION

    To convert a string to a integer. atoi() is for decimal format. atoi2(
    ) is for binary format. atoi16() is for hex format


ARGUMENTS

    intstr: The string to be converted


RETURN

    The result integer


EXAMPLES

    assert(atoi('100') == 100);
    assert(atoi2('11111111') == 255);
    assert(atoi16('FF') == 255);

NAME

    itoa, itoa2


SYNOPSIS

    TString itoa(TInteger i)
    TString itoa2(TInteger i)


DESCRIPTION

    To convert a integer to a string. itoa() returns decimal string. itoa2(
    ) returns binary string


ARGUMENTS

    i: The integer to be converted. for itoa2(), this integer must be between 
    0-255


RETURN

    The result string. For itoa2(), the string length is fixed at 8


EXAMPLES

    assert(itoa(255) == '255');
    assert(itoa2(255) == '11111111');
    assert(itoa2(1) == '00000001');

NAME

    strd2h, strh2d, strh2u


SYNOPSIS

    TString strd2h(TString s)
    TString strh2d(TString s)
    TString strh2u(TString s)


DESCRIPTION

    strd2h() is to convert a decimal string to a hex string, The integer 
    can be between -9223372036854775808 and 9223372036854775807. strd2h()
     returns string as short as possible.
    strh2d() is to convert a signed hex string to a decimal string, the 
    hex string length must be between 2-16
    strh2d() is to convert a unsigned hex string to a decimal string, the 
    hex string length must be between 2-16


ARGUMENTS

    s: The string to be converted


RETURN

    The result string


EXAMPLES

    assert(strd2h('-9223372036854775808') == '8000000000000000');
    assert(strd2h('-1') == 'FF');
    assert(strd2h('0') == '00');
    assert(strd2h('9223372036854775807') == '7FFFFFFFFFFFFFFF');
    assert(strd2h('-9223372036854775808') == '8000000000000000');
    
    assert(strh2d('8000000000000000') == '-9223372036854775808');
    assert(strh2d('FF') == '-1');
    assert(strh2d('FFFFFFFFFFFFFFFF') == '-1');
    assert(strh2d('00') == '0');
    assert(strh2d('0000000000000000') == '0');
    assert(strh2d('7FFFFFFFFFFFFFFF') == '9223372036854775807');
    assert(strh2d('8000000000000000') == '-9223372036854775808');
    
    assert(strh2u('00') == '0');
    assert(strh2u('ff') == '255');
    assert(strh2u('ffff') == '65535');
    assert(strh2u('ffffffffffffffff') == '18446744073709551615');
    assert(strh2u('8000000000000000') == '9223372036854775808');
    assert(strh2u('7fffffffffffffff') == '9223372036854775807');

NAME

    asctobcd, bcdtoasc


SYNOPSIS

    TString asctobcd(TString s)
    TString bcdtoasc(TString s, TInteger mode=1)


DESCRIPTION

    asctobcd() is to convert asc string to bcd string. bcdtoasc() is to 
    convert bcd string to asc string


ARGUMENTS

    s: The string to be converted. The asc string can only include characters 
    in set [0-9A-Fa-f] or star or double-cross that the star is equal to 
    'B' and the double-cross is equal to 'C'

    mode: The converting mode for bcdtoasc(). 1 means that the star or double-
    cross is used and 0 means that 'B' or 'C' is used


RETURN

    The result string.  The last nibble of the bcd string will be filled 
    with 0 if the asc string length is odd


EXAMPLES

    assert(asctobcd('126') == '\21\06');
    assert(bcdtoasc('\02\50\90\51\71\23\52') == '20050915173225');

NAME

    gbktounicode, unicodetogbk


SYNOPSIS

    TString gbktounicode(TString source)
    TString unicodetogbk(TString source,TInteger length)


DESCRIPTION

    gbktounicode() is to convert the GBK string to UCS2 string. unicodetogbk(
    ) is to convert the UCS2 string to GBK string


ARGUMENTS

    source: The string to be converted

    length: The string length


RETURN

    The result string


NAME

    htmlentity2gbk, htmlentity2utf8


SYNOPSIS

    TString htmlentity2gbk(TString source)
    TString htmlentity2gbk(TString source)


DESCRIPTION

    These functions is to replace the html entities in the source string 
    to the GBK character or UTF8 character and return a new string. It will 
    not be replaced if the html entity format is not valid or no GBK character 
    defined (for htmlentity2gbk()). The 253 html entity names defined in 
    HTML4.0 are supported.


ARGUMENTS

    source: The string to be converted


RETURN

    The result string


EXAMPLES

    s = htmlentity2gbk('&amp;&gt;&&&&#x61&#x61;&#x54C8;');
    assert(s == '&>&&&&#x61a\B9\FE', s);
    s = htmlentity2gbk('&amp;&gt;&&&&#x61&#x61;&#x54C8;');
    assert(s == '&>&&&&#x61a\E5\93\88', s);

NAME

    bit7tounicode


SYNOPSIS

    TString bit7tounicode(TString source)


DESCRIPTION

    To convert the 7-bit string (normally used in short message) to UCS2 
    string


ARGUMENTS

    source: The string to be converted


RETURN

    The result string


NAME

    utf8toucs2, ucs2toutf8


SYNOPSIS

    TString utf8toucs2(TString s, TInteger i=0)
    TString ucs2toutf8(TString s, TInteger i=0 )


DESCRIPTION

    utf8toucs2() is to convert UTF-8 string to UCS2 string. ucs2toutf8()
     is to convert UCS2 string to UTF-8 string


ARGUMENTS

    s: The string to be converted

    i: The bit order of the UCS2 string. For utf8toucs2(), 3 is for big 
    endian and 2 is for little endian. For ucs2toutf8() 1 is for big endian 
    and 0 is for little endian. The default value is 0


RETURN

    The result string. A null string will be returned if the source string 
    format is not valid


EXAMPLES

    assert(utf8toucs2('\EF\BB\BF\E6\B1\89\E5\A5\8E\61\62', 2)
       == '\FF\FE\49\6C\4E\59\61\00\62\00');
    assert(utf8toucs2('\EF\BB\BF\E6\B1\89\E5\A5\8E\61\62', 3)
       == '\FE\FF\6C\49\59\4E\00\61\00\62');

NAME

    base64decode, base64decode


SYNOPSIS

    TString base64encode(TString s)
    TString base64decode(TString s)


DESCRIPTION

    base64encode() is to encode normal string to BASE64 format. base64decode(
    ) is to decode BASE64 format string to normal string


ARGUMENTS

    s: The source string


RETURN

    The result string


EXAMPLES

    assert(base64encode('abcde') == 'YWJjZGU=');
    assert(base64decode('YWJjZGU=') == 'abcde');

NAME

    encrypt


SYNOPSIS

    TString encrypt(TString src, TString key)


DESCRIPTION

    To encrypt a string. It use unix standard crypt() function.


ARGUMENTS

    src: The string to be encrypted

    key: The encryption key


RETURN

    The encryption result


EXAMPLES

    assert(encrypt('abcd', '12') == '12UhNQxwwKQ7c');
    assert(encrypt('123456', '123456') == '635204');

NAME

    md5


SYNOPSIS

    TString md5(TString s, TInteger length=0)


DESCRIPTION

    To encrypt a string using MD5 algorithm.


ARGUMENTS

    s: The string to be encrypted

    length: if s include null character, you may use this argument to indicate 
    the length. The default value is 0 that means only part before null character 
    is used


RETURN

    A 16 bytes string


EXAMPLES

    assert(md5('abcd') == '\E2\FC\71\4C\47\27\EE\93\95\F3\24\CD\2E\7F\33\
    1F');
    assert(md5('abcd\00abcd') == '\E2\FC\71\4C\47\27\EE\93\95\F3\24\CD\2E\
    7F\33\1F');
    assert(md5('abcd\00abcd',9) == '\13\DA\E0\38\04\FD\7F\DA\C5\B0\8E\5B\
    41\02\82\72');

NAME

    descrypt, descbccrypt


SYNOPSIS

    TString descrypt(TString arg1, TString arg2, TInteger arg3, TInteger 
    arg4=0)
    TString descbccrypt(TString arg1, TString arg2, TInteger arg3, TInteger 
    arg4=0)


DESCRIPTION

    descrypt() is to encrypt or decrypt a string using DES algorithm. descbccrypt(
    ) is to encrypt or decrypt a string using CBC based DES algorithm.


ARGUMENTS

    arg1: The 8 bytes source string

    arg2: The 8 bytes key

    arg3: The length of source string

    arg4: The mode. 0 is for encryption, other values is for decryption

    

RETURN

    The 8bytes result string


NAME

    desmac


SYNOPSIS

    TString desmac(TString arg1, TString arg2, TInteger arg3)


DESCRIPTION

    To generate a digest for a text string according to a key. 


ARGUMENTS

    arg1: The text string

    arg2: The 8 bytes key

    arg3: The length of the text string


RETURN

    The 8 bytes digest


NAME

    rc4crypt


SYNOPSIS

    TString rc4crypt(TString src, TString key, TInteger srcLen=0, TInteger 
    keyLen=0)


DESCRIPTION

    To encrypt a string using RC4 algorithm


ARGUMENTS

    src: The source string

    key: The encryption key

    srcLen: The valid length of source string. The default value is 0 for 
    total length of the source string

    keyLen: The valid length of key. The default value is 0 for total length 
    of the key


RETURN

    The result string


NAME

    idea


SYNOPSIS

    TString idea(TString s, TInteger length, TInteger mode, TString key,
     TString& ivec)


DESCRIPTION

    To encrypt or decrypt a string using IDEA algorithm, using cfb mode

    

ARGUMENTS

    s: The source string

    length: The length of source string

    mode: 1 is for encryption, 0 is for decryption

    key: The 16 bytes key. Normally it is a MD5 result

    ivec: The 8 bytes initial vector


RETURN

    The result string. Its length is equal to the source string length


EXAMPLES

    #progma c
    void main()
    {
       var TString plain,cipher,cipher1,plain1,cipher2,plain2,plain3;
       var TString key,ivec;
       var TInteger mode,length;
    
       plain='This is the plain i want to encrypt by idea algorithm.';
       key=md5('222222');
       printbin(key);
       ivec='12345678';
    
       length=strlen(plain);
       print('length='+itoa(length));
    
       mode=1;//encrypt
       // first, encrypt the precious 44 bytes
       cipher=idea(plain, length-10, mode, key, ivec);
       print('ivec='+ivec); // ivec is changed
       printbin(cipher);
    
       // then encrypt the last 10 bytes
       cipher1=idea(substr(plain,length-10,10), 10, mode, key, ivec);
       print('cipher1:');
       printbin(cipher1);
    
       cipher2=cipher+cipher1; // the total cipher text
       print('cipher2:');
       printbin(cipher2);
    
       mode=0; // decryption
       ivec='12345678'; // The value is same as encryption
    
       // decrypt the priviois 44 bytes, and the ivec is changed
       plain2=idea(cipher2, length-10, mode, key, ivec);
    
       // decrypt the last 10 bytes
       plain3=idea(substr(cipher2,length-10,10),10,mode,key,ivec);
       plain1=plain2+plain3; // the total plain text
       printbin(plain1);
       printbin(plain);
    
       if(strcmp(plain, plain1)==0)
          print('ok.');
       else
          print('error!');
    }

NAME

    ideaecb


SYNOPSIS

    TString ideaecb(TString s,TString c,TInteger& length,TInteger mode,TString 
    key)


DESCRIPTION

    To encrypt or decrypt a string using IDEA algorithm, using ecb mode.
    


ARGUMENTS

    s: The source string

    c: when s'length is not multiple of 8, it will fill with character c

    
    length: The length of cipher string

    mode: 1 is for encryption, 0 is for decryption

    key: The 16 bytes key. Normally it is a MD5 result


RETURN

    The result string. It's length is in returned parameter length


EXAMPLES

    #progma c
    void main()
    {
       var TString plain,cipher,cipher1,plain1,cipher2,plain2,plain3;
       var TString key,ivec;
       var TInteger mode,length,newlen;
    
      plain='This is the plain i want to encrypt by ideaecb algorithm.';
    
       key=md5('222222');
       printbin(key);
    
       length=strlen(plain);
       print('length='+itoa(length));
    
       mode=1;//encrypt
       cipher=ideaecb(plain,' ',newlen,mode,key);
       print('newlen='+itoa(newlen));
       printbin(cipher);
    
       mode=0; // decryption
       plain1=ideaecb(cipher,' ',newlen,mode,key);
       print('newlen='+itoa(newlen));
       printbin(plain1);
    
       plain=plain+' '+' ';
       printbin(plain);
       if(strcmp(plain, plain1)==0)
          print('ok.');
       else
          print('error!');
    
       plain2='1234567812345678';
       cipher2=ideaecb(plain2,' ',newlen,1,key);
       print('newlen='+itoa(newlen));
       printbin(cipher2);//fisrt 8 bytes and last 8 bytes are equal
       ivec='11111111';
       cipher1=idea(plain2,16,1,key,ivec);
       printbin(cipher1);//fisrt 8 bytes and last 8 bytes are different
    }

NAME

    httpauthenticate, httpgetauthorization


SYNOPSIS

    TString httpauthenticate(TString nonce, TString realm)
    TString httpgetauthorization(TString a, TString method, TString uri,
     TString username, TString password)


DESCRIPTION

    httpauthenticate() is to construct the content of WWW-Authenticate header 
    before server sending message
    httpgetauthorization() is to construct the content of Authenticate header 
    before client sending message


ARGUMENTS

    nonce: nonce string

    realm: realm string

    a: The content of WWW-Authenticate header of the message that client 
    received

    method: The method used to send message, 'GET' or 'POST'

    uri: The uri address to request '/QuickSetup.htm'µÈ

    username: User name

    password: User password


RETURN

    The constructed content of WWW-Authenticate header or Authenticate header

    

NAME

    httpauthuri, httpauthusername, httpauthnonce


SYNOPSIS

    TString httpauthuri(TString a)
    TString httpauthusername(TString a)
    TString httpauthnonce(TString a)


DESCRIPTION

    These functions are to get the uri, username, nonce from the content 
    of the Authenticate header after server received message


ARGUMENTS

    a: The content of Authenticate header of the message that the server 
    received


RETURN

    The result value


NAME

    httpauthorization


SYNOPSIS

    TInteger httpauthorization(TString a, TString nonce, TString method,
     TString password)


DESCRIPTION

    This function is to do the authorization for server


ARGUMENTS

    a: The content of Authenticate header of the message that the server 
    received

    nonce: nonce string

    method: The method used to send message, 'GET' or 'POST'

    password: The user password


RETURN

    1 is for success, 0 is for failure


NAME

    tosec, tosec2, sectoasctime


SYNOPSIS

    TInteger tosec(TString ascTime)
    TString tosec2(TString ascTime)
    TString sectoasctime(TInteger t)


DESCRIPTION

    tosec() is to get the seconds between 1970-1-1 00:00:00 and ascTime.
     tosec2() is to get the seconds between 1900-1-1 00:00:00 and ascTime.
     tosec2() will return a string because the result may be greater than 
    the maximun of 4 bytes integer. 
    sectoasctime() is the inverse function of tosec(). It is to get the 
    asc format time according a seconds integer


ARGUMENTS

    ascTime: The time string. The format is YYYYMMDDHHmmSS

    t: The seconds integer from 1970-1-1 00:00:00


RETURN

    tosec() returns a integer. tosec2() returns a decimal string
    sectoasctime() returns a time string and the format is YYYYMMDDHHmmSS

    

EXAMPLES

    var TInteger i = tosec('20040401102030');
    var TInteger j = tosec('20040401112030');
    assert(j - i == 3600);
    
    assert(tosec('20070723093100') == 1185154260);
    assert(tosec2('20070723093100') == '3394143060');
    
    var TString time,time1;
    var TInteger sec;
    var TString time = currentdate8andtime();
    var TInteger sec = tosec(time);
    var TString time1 = sectoasctime(sec);
    assert(time == time1);

NAME

    ntptimestamp


SYNOPSIS

    TString ntptimestamp(TInteger t)


DESCRIPTION

    To get the NTP time stamp according to a seconds integer from 1970-1-
    1 00:00:00.


ARGUMENTS

    t: A second integer. Normally it is the result of tosec() function


RETURN

    A 4 bytes string


EXAMPLES

    assert(tosec('20070723093100') == 1185154260);
    assert(tosec2('20070723093100') == '3394143060');
    assert(ntptimestamp(1185154260) == '\CA\4E\83\54');
    assert(strh2u('CA4E8354') == '3394143060'); // 3394143060 = 1185154260 
    + 2208988800

NAME

    validasctime


SYNOPSIS

    TInteger validasctime(TString s)


DESCRIPTION

    To verify a time string


ARGUMENTS

    s: time string to be verified


RETURN

    1 is returned for valid format. 0 is for not valid


EXAMPLES

    var TInteger iresult;
    iresult = validasctime('20101020141620');
    print('result is:'+itoa(iresult));

NAME

    asctimeadd


SYNOPSIS

    TString asctimeadd(TString t1, TInteger s)


DESCRIPTION

    To get another time string according to a time string and a second integer

    

ARGUMENTS

    t1: The time string. The format is YYYYMMDDHHmmSS

    s: A second integer. It can be negative


RETURN

    A new time string. The format is YYYYMMDDHHmmSS


EXAMPLES

    s = asctimeadd(currentdate8andtime(),-3600*24*30)
    // to get the time string before 30 days

NAME

    addmonth


SYNOPSIS

    TString addmonth(TString t1, TInteger s)


DESCRIPTION

    To get another time string according to a time string and a month integer.
     
    Note 1: If the source date is the last day of a month, the new date 
    is also the last day of the month
    Note 2: If the day of new date is not valid for the new month, the function 
    will choose a valid day automatically


ARGUMENTS

    t1: The time string. The format is YYYYMMDDHHmmSS

    s: The month integer to be added. It can be negative


RETURN

    A new time string. The format is YYYYMMDDHHmmSS


EXAMPLES

    assert(addmonth('20100101000000', 1) == '20100201000000');
    assert(addmonth('20100131000000', 1) == '20100228000000');
    assert(addmonth('20100227000000', 1) == '20100327000000');
    assert(addmonth('20100228000000', 1) == '20100331000000');

NAME

    nextweekday


SYNOPSIS

    TString nextweekday(TString t1, TInteger s)


DESCRIPTION

    To get a new time string according to a time string and a next weekday 
    index ( 0 for Sunday, 1 for Monday ... 6 for Saturday ). 


ARGUMENTS

    t1: The time string. The format is YYYYMMDDHHmmSS

    s: weekday index, It is an integer between 0 and 6 ( 0 for Sunday, 1 
    for Monday ... 6 for Saturday )


RETURN

    A new time string. The format is YYYYMMDDHHmmSS


EXAMPLES

    // for example, 2002-5-20 is Monday
    assert(nextweekday('20020520000000', 6) == '20020525000000'); // get 
    next Saturday
    assert(nextweekday('20020520000000', 5) == '20020524000000'); // get 
    next Friday

NAME

    monthlastday


SYNOPSIS

    TString monthlastday(TString t1)


DESCRIPTION

    To get the last day of the month that t1 indicated


ARGUMENTS

    t1: The time string that format is YYYYMMDDHHmmSS


RETURN

    A new time string that format is YYYYMMDDHHmmSS


EXAMPLES

    var TString stmp;
    stmp =monthlastday('20101020');
    print(stmp);
    ±¾Àý·µ»ØÊ±¼ä£º20101031142135
    142135ÎªÏµÍ³±¾Ììµ±Ç°Ê±¼ä
    ²ÎÊý¾ßÌåµ½ÃëÊ±£¬·µ»ØµÄ½á¹ûÎª²éÕÒÔÂ×îºóÒ»ÌìµÄÏàÓ¦Ê±¼ä¡£·ñÔò·µ»Ø×îºóÒ»
    ÌìµÄÓëµ±Ç°Ê±¼äÒ»ÑùµÄÊ±¼ä

NAME

    strftime, strptime


SYNOPSIS

    TString strftime(TString s1, TString format)
    TString strptime(TString s2, TString format)


DESCRIPTION

    strftime() is to get the ISO 8601 time string according to the 14 bytes 
    time string and the format
    strptime() is to get the 14 bytes time string according to the ISO 8601 
    time string and the format. This function is not supported for Windows 
    version


ARGUMENTS

    s1: The time string that the format is YYYYMMDDHHmmSS. A null string 
    is for current date and time. Only for HHmmSS if the string length is 
    6

    format: It is same as the third argument of unix strftime() function

    
    s2: The ISO 8601 time string


RETURN

    strftime() returns the ISO 8601 time string.
    strptime() returns 14 bytes YYYYMMDDHHmmSS time string. If the argument 
    time string is not complete, only some bytes is valid in the returned 
    string and other bytes may be random value


EXAMPLES

    assert(strftime('20040723012243', '%T') == '01:22:43');
    assert(strftime('20040723012243', '%c') == 'Fri Jul 23 01:22:43 2004'
    );
    assert(strftime('20040723012243', '%D') == '07/23/04');
    assert(strftime('20000101123456', '%T') == '12:34:56')
    assert(strftime('123456', '%T') == '12:34:56')
    
    assert(strptime('2000-01-01 12:34:56','%Y-%m-%d %T') == '20000101123456'
    );
    assert(strptime('Fri Jul 23 16:00:21 2004','%c') == '20040723160021'
    )

NAME

    currentdate8andtime


SYNOPSIS

    TString  currentdate8andtime(TInteger alignSec=-1, TInteger timeZone=
    0)


DESCRIPTION

    To get the time string of the system current date and time. This function 
    can also get the alignment time according to the alignment arguments

    

ARGUMENTS

    alignSec: The second number from Greenwich 00:00:00 (0-86399 is valid)
    . The default value is -1 for no alignment.

    timeZone: The minute number between local time and Greenwich time. (
    -720-780 is valid)


RETURN

    14 bytes time string that the format is YYYYMMDDHHmmSS


EXAMPLES

    // For example, in china, the time area is East 8.
    print(currentdate8andtime());
    // For example the output is 20080728201605 (2008-7-28 20:16:05).
    // This is the scf system time.
    
    print(currentdate8andtime(10*3600,480));
    // Then output 20080728180000
    
    print(currentdate8andtime(12*3600,480));
    // Then output 20080728200000
    
    print(currentdate8andtime(14*3600,480));
    // Then output 20080728220000
    
    print(currentdate8andtime(16*3600,480));
    // Then output 20080729000000. The date is 29
    // Because 20080729000000 is nearer to system time than 20080728000000
    
    print(currentdate8andtime(18*3600,480));
    // Then output 20080729020000
    
    print(currentdate8andtime(20*3600,480));
    // Then output 20080729040000
    
    print(currentdate8andtime(22*3600,480));
    // Then output 20080729060000
    
    print(currentdate8andtime(0,480));
    // Then output 20080729080000
    
    print(currentdate8andtime(2*3600,480));
    // Then output 20080728100000. The date is 28
    // Because 20080728100000 is nearer to system time than 20080729100000
    
    print(currentdate8andtime(4*3600,480));
    // Then output 20080728120000
    
    print(currentdate8andtime(6*3600,480));
    // Then output 20080728140000
    
    print(currentdate8andtime(8*3600,480));
    // Then output 20080728160000

NAME

    callstartdate8andtime


SYNOPSIS

    TString  callstartdate8andtime ()


DESCRIPTION

    To get the time string of current system time


ARGUMENTS

    ÎÞ

RETURN

    14 bytes time string that the format is YYYYMMDDHHmmSS


NAME

    sysuptime


SYNOPSIS

    TString sysuptime()


DESCRIPTION

    To get the seconds integer from the system start-up


ARGUMENTS

    ÎÞ

RETURN

    The second integer from the system start-up


EXAMPLES

    iresult = sysuptime();
    print(itoa(iresult));

NAME

    gettimeofday


SYNOPSIS

    TString gettimeofday()


DESCRIPTION

    To get the current system time string include seconds and microseconds

    

ARGUMENTS

    ÎÞ

RETURN

    A string that the format is seconds and dot and microseconds. For example:
     '1245855930.296627'


EXAMPLES

    var TString s = gettimeofday();

NAME

    sqltable, sqlclass


SYNOPSIS

    TString sqltable(TString sql)
    TString sqlclass(TString sql)


DESCRIPTION

    sqltable() is to get the table name from the sql statement. sqlclass(
    ) is to get the operation class from the sql statement


ARGUMENTS

    sql: The sql statement string


RETURN

    The string for table name or operation class name


EXAMPLES

    assert(sqltable('select * from acr_record') == 'ACR_RECORD');
    assert(sqlclass('select * from acr_record') == 'SELECT');

NAME

    sqlgetstrprefix


SYNOPSIS

    TString sqlgetstrprefix(TString s)


DESCRIPTION

    To get a string include all prefix of another string. The result is 
    used to construct a sql statement for 'in()' operation


ARGUMENTS

    s: The source string


RETURN

    A set of prefix of a string. Each prefix is in single quotation marks 
    and commas separate them


EXAMPLES

    assert(sqlgetstrprefix('12345') ==
    '\2712345\27,\271234\27,\27123\27,\2712\27,\271\27'
    // \27 is ', eg, '12345','1234','123','12','1'

NAME

    getsqlerror


SYNOPSIS

    TString getsqlerror()


DESCRIPTION

    To get the last sql statement execution error information


ARGUMENTS

    ÎÞ

RETURN

    A string for the last sql statement execution error information


NAME

    sqlstrencode, sqlstrdecode


SYNOPSIS

    TString sqlstrencode( TString s)
    TString sqlstrdecode( TString s)


DESCRIPTION

    sqlstrencode() is to encode some strings include special characters 
    before constructing sql statement. sqlstrdecode() is to decode some string 
    include special characters when processing sql select result. The special 
    characters include enter or vertical line


ARGUMENTS

    s: The source string


RETURN

    The result string


EXAMPLES

    assert(sqlstrencode('abc\ndef|123') == 'abc\\0Adef\\7C123');
    assert(sqlstrdecode('abc\\0Adef\\7C123') == 'abc\ndef|123');

NAME

    sqlfetch, sqlrun


SYNOPSIS

    TInteger sqlfetch(TSCPTable t, TString sql, TInteger maxRows=500, beginRow=
    0)
    TInteger sqlrun(TString sql, TInteger notSync=0)


DESCRIPTION

    To execute a sql statement. sqlfetch() is for select statement. sqlrun(
    ) is for other statement


ARGUMENTS

    t: The handle of TSCPTable object to save the select result. It must 
    be constructed before calling this function

    sql: The sql statement to be executed

    maxRows: The maximum returning rows for select. The value must between 
    1-500. The default value is 500. 
    If the value of this argument is 0, cursor mode is used. For cursor 
    mode, the cursor will be opened and the first record will be returned 
    when first time calling sqlfetch() function. The next record will be 
    returned when the next time calling sqlfetch() function. The cursor will 
    be closed when fetched the last record.
    If the value of this argument is -1, the cursor will be force closed.
     

    beginRow: The first record index to fetch. This argument is not support 
    for all database. This argument is not used for cursor mode

    notSync: Whether synchronous the sql execution to SMP. 0 is for yes,
     1 is for no. The default value is 0.


RETURN

    It is success if the return value is greater than or equal to 0. The 
    value is the records effected. It is failure if the return value is less 
    than 0. -39 will be returned when no record match the condition of select,
     update or delete statement.


EXAMPLES

    #progma c
    void main()
    {
       var TString sql;
       var TInteger i,j,k;
       var TSCPTable t;
    
       sql='drop table sqlfunctest';
       i=sqlrun(sql);
       if(i<0)
          print('drop failure');
    
       sql='create table sqlfunctest (a int, b char(10))';
       i=sqlrun(sql);
       if(i<0)
          print('create failure');
    
       sql='insert into sqlfunctest(a,b) values (100, \'12345\')';
       i=sqlrun(sql);
       if(i<0)
          print('insert failure');
       else
          print(sprintf('insert %d records',i));
    
       sql='insert into sqlfunctest(a,b) values (200, \'abcd3\')';
       i=sqlrun(sql);
       if(i<0)
          print('insert failure');
       else
          print(sprintf('insert %d records',i));
    
       t=new TSCPTable;
       sql='select * from sqlfunctest';
       i=sqlfetch(t, sql, 10);
       if(i<0)
          print('select failure');
       else
       {
          k=t.rowcount();
          print(sprintf('return %d, rowcount %d',i,k));
          for(j=1;j<=k;j=j+1)
          {
             print(sprintf('row %d: %s',j,t.rowtostr(j)));
          }
       }
       //SCF6.5(08.12)ÒÔÉÏ°æ±¾Ö§³ÖinformixÊý¾Ý¿â¶Ôsqlfetch²Ù×÷´æ´¢¹ý³ÌµÄ
    µ÷ÓÃ¼°·µ»Ø
       sqlrun('create procedure slpltest(i integer, j integer)
          returning integer, integer;
          return i+j, i-j;
          end procedure');
       sqlfetch(t, 'execute procedure slpltest(10, 20)', 10);
       assert(t.tostr()=='30|-10', t.tostr());
    
    }

NAME

    fgets


SYNOPSIS

    TString fgets(TString fileName, TInteger mode=0, TInteger flag=0)


DESCRIPTION

    To read a file line by line. If the file name is same as the last calling 
    of this function, the next line of this file is returned. If the file 
    name is changed, another new file is open and the first line is returned.
    


ARGUMENTS

    fileName: The file name

    mode: The mode of opening file. 0 is for read only, values greater than 
    0 are for read and write. The default value is 0

    flag: The flag for processing file end. The default value is 0 for return 
    a null string if file is end


RETURN

    A string of one file line including the enter character


EXAMPLES

    var TString fileName,line;
    fileName=...;
    line=fgets(fileName,0,1);
    while(line!='')
    line=fgets(fileName,0,1);
    print('file is end');

NAME

    fputs


SYNOPSIS

    TInteger fputs(TString fileName, TString line)


DESCRIPTION

    To append a line to a file. The enter character is added automatically

    

ARGUMENTS

    fileName: The file name

    line: The string of one line to append


RETURN

    0


EXAMPLES

    var TString sfile;
    sfile=sprintf('%s/log/test.txt',getenv('CINDIR'));
    assert(fputs(sfile,'hello world') == 0);

NAME

    fwrite


SYNOPSIS

    TInteger fwrite(TString fileName, TInteger pos, TString str, TInteger 
    length)


DESCRIPTION

    To write a string to a file


ARGUMENTS

    fileName: The file name

    pos: The begin position of the file to write (-1 is for the end of the 
    file)

    str: The string to be written

    length: The length to write. If the length is not valid ( less than 
    or equal to 0, greater than the string length ), the whole string length 
    is used


RETURN

    The actual bytes number that is written


EXAMPLES

    assert(fwrite('file',0,'good',-2) == 4);

NAME

    fread


SYNOPSIS

    TString fread(TString fileName, TInteger pos, TInteger length)


DESCRIPTION

    To read a string from a file


ARGUMENTS

    fileName: The file name

    pos: The begin position of the file to read

    length: The length to read. If the length is equal to or less than 0,
     read to the end if the file


RETURN

    The read result string. Notice: fread can only read file content less 
    than 512K


EXAMPLES

    s = fread('file', 0, 2)

NAME

    fileexisted


SYNOPSIS

    TInteger fileexisted(TString path)


DESCRIPTION

    To check whether the file is existed according to the file path


ARGUMENTS

    path: The file path


RETURN

    1 is for existed, 0 is for not existed


NAME

    filetype


SYNOPSIS

    TInteger filetype(TString path)


DESCRIPTION

    To get the file type


ARGUMENTS

    path: The file path


RETURN

    returns -1 for file not existed. Other values:
    1: Named pipe
    4: Directory
    8: Normal file
    10: Symbol link


EXAMPLES

    var TString sfile;
    sfile=sprintf('%s/log/test.txt',getenv('CINDIR'));
    iresult = filetype(sfile);
    print('file type ' + itoa(iresult));

NAME

    filemode


SYNOPSIS

    TInteger filemode(TString path)


DESCRIPTION

    To get the file permissions


ARGUMENTS

    path: The file path


RETURN

    -1 is returned for the file not existed. Other integer is returned to 
    indicate the permissions. The lower 9 bit of the integer means the user,
     group, and others have permissions to read, write, and execute


NAME

    filesize


SYNOPSIS

    TInteger filesize(TString path)


DESCRIPTION

    To get the file size


ARGUMENTS

    path: The file path


RETURN

    -1 is returned for the file not existed. Other positive integer is returned 
    to indicate the file size in byte


NAME

    filemtime


SYNOPSIS

    TString filemtime(TString path)


DESCRIPTION

    To get the file modification time


ARGUMENTS

    path: The file path


RETURN

    A null string is returned for the file not existed or a 14 byte time 
    string is returned for the last modification time of the file. The time 
    string format is YYYYMMDDHHmmSS


NAME

    createdirectory


SYNOPSIS

    TInteger createdirectory(TString path)


DESCRIPTION

    To create a directory according to a path. If the directory is existed,
     1 is returned for success. If some nodes are not existed in the path,
     the nodes will be created automatically.


ARGUMENTS

    path: The directory path


RETURN

    1 is for success and 0 is for failure


NAME

    listdirectory


SYNOPSIS

    TString[] listdirectory(TString path, TInteger start=0, TInteger max=
    500)


DESCRIPTION

    To get the file name list according to a directory path


ARGUMENTS

    path: The directory path

    start: The begin index.

    max: The max file name number to return


RETURN

    A string array. If the directory is not existed, the length of the array 
    is 0


EXAMPLES

    // For example, there are 'aa' file and 'bb' file in the directory
    assert(listdirectory(path).tostr() == '.|..|aa|bb');
    assert(listdirectory(path,0,1).tostr() == '.');
    assert(listdirectory(path,0,3).tostr() == '.|..|aa');
    assert(listdirectory(path,2,2).tostr() == 'aa|bb');

NAME

    switchtranslate


SYNOPSIS

    TString switchtranslate(TString s, TString  defaultValue, ... )


DESCRIPTION

    To translate a string according to the match result


ARGUMENTS

    s: The string to be matched

    defaultValue: The default value. If no string is matched, this value 
    is returned

    ...: The following arguments are always used in pairs. The former is 
    matching string and the later is the translated string if matched.


RETURN

    The translated string


EXAMPLES

    s1 = 'ACR_RECORD';
    s = switchtranslate(s1,'null','ACR_RECORD','AA','ACR_RECORD_01','BB'
    );
    assert(s == 'AA');

NAME

    rematch


SYNOPSIS

    TInteger rematch(TString regexp, TString s)


DESCRIPTION

    To check whether a string can match to a regular expression. The matching 
    is for total string, not for sub string.


ARGUMENTS

    regexp: The regular expression string

    s: The string to match


RETURN

    The matching result. 1 is returned for success. A negative integer is 
    returned for matching failure and the absolute value indicate the failure 
    position of the string. If the regular expression is invalid, an exception 
    will be thrown out


EXAMPLES

    var TString str='abcdefghijklmnop';
    var TString regexp = '[a-z]{4,16}';
    var TInteger ret=rematch(regexp, str);
    assert(ret==1);

NAME

    hxmlparse, TXMLTree::TXMLTree


SYNOPSIS

    TXMLTree hxmlparse(TString xmlStr)
    TXMLTree::TXMLTree(TString xmlStr, TInteger parseType=0, TString wbxmlCfg=
    '')


DESCRIPTION

    To parse an XML string and construct a TXMLTree object


ARGUMENTS

    xmlStr: The XML string to be parsed. This string can be WBXML format 
    if the parse type is 2 ( the second argument of TXMLTree::TXMLTree() 
    function )

    parseType: The parse type. The default value is 0.
    0: All element content fragments will be merged to one string even though 
    they are separated by sub-elements
    1: Element content fragments will not be merged if they are separated 
    by sub-elements
    2: The string is WBXML (Wireless Binary XML) format
    3: Ths string is JSON format

    wbxmlCfg: This argument is the WBXML tag configuration name when the 
    parse type is 2


RETURN

    The new TXMLTree object handle


EXAMPLES

    var TXMLTree x;
    x = hxmlparse('<a><b>AABBCC</b><b>22222</b><c>33333</c></a>');
    x = new TXMLTree('<a><b>AABBCC</b><b>22222</b><c>33333</c></a>');
    
    x = new TXMLTree('<a>aaa<b>bbb</b>AAA</a>');
    assert(x.tostr()=='<a>aaaAAA<b>bbb</b></a>'); // 'aaa',  'AAA' -> 'aaaAAA'
    
    x = new TXMLTree('<a>aaa<b>bbb</b>AAA</a>', 1);
    assert(x.tostr()=='<a>aaa<b>bbb</b>AAA</a>');
    
    /* For example the following is the WBXML tag configuration file
       <token>
          <tag>
             <item name="aaa" id="5"/>
             <item name="bbb" id="6"/>
             <item name="ccc" id="7"/>
          </tag>
       </token>
       The file name is wbxmltest
     */
    var TString s =
    '\01\01\03\00\45\03\31\31\31\00\46\03\32\32\32\00\01\47\03\33\33\33\
    00\01\01';
    x = new TXMLTree(s, 2, 'wbxmltest');
    assert(x.tostr() == '<aaa>111<bbb>222</bbb><ccc>333</ccc></aaa>');

NAME

    hxml, TXMLTree::getvalue


SYNOPSIS

    TString hxml(TXMLTree handle, TString path, TString default)
    TString TXMLtree::getvalue(TString path, TString default)


DESCRIPTION

    To get the content of an element


ARGUMENTS

    handle: The handle of the TXMLTree object

    path: The element path

    default: The default value for path invalid


RETURN

    The elememt content is returned if the path is valid. If the path is 
    invalid the default value will be returned


EXAMPLES

    var TXMLTree i = hxmlparse('<x cvd:attr1="hello">xxx<y>yyy</y></x>')
    ;
    s1 = hxml(i,'x/y','null');
    s2 = hxml(i,'x/z','null');
    s3 = hxml(i,'x/cvd:attr1','null');
    assert(s1 == 'yyy');
    assert(s2 == 'null');
    assert(s3 == 'hello');
    
    s1 = i.getvalue('x/y','null');
    s2 = i.getvalue('x/z','null');
    s3 = i.getvalue('x/cvd:attr1','null');
    assert(s1 == 'yyy');
    assert(s2 == 'null');
    assert(s3 == 'hello');

NAME

    hxmlcc, TXMLTree::childcount


SYNOPSIS

    TInteger hxmlcc(TXMLTree handle, TString path)
    TInteger TXMLtree::childcount(TString path)


DESCRIPTION

    To get the children number of an element


ARGUMENTS

    handle: The TXMLTree handle

    path: The element path


RETURN

    The children number integer


EXAMPLES

    var TXMLTree i = hxmlparse('<x>xxx<y>yyy</y></x>');
    var TInteger j = hxmlcc (i, 'x');
    assert(j == 1);
    j = i.childcount('x');
    assert(j == 1);

NAME

    hxmlstr, TXMLTree::tostr, TXMLTree::wbxmlencode


SYNOPSIS

    TString hxmlstr(TXMLtree handle)
    TString TXMLTree::tostr(TInteger indent=-1)
    TString TXMLTree::wbxmlencode(TString wbxmlCfg)


DESCRIPTION

    To convert the TXMLTree object to an XML string. wbxmlencode() is to 
    convert the object to WBXML string


ARGUMENTS

    handle: The handle of the TXMLTree object

    indent: Whether to format the XML string. The default value is -1 for 
    not formatting. 0 is for formatting.

    wbxmlCfg: The WBXML configuration file name


RETURN

    XML string or WBXML string


EXAMPLES

    var TXMLTree i = hxmlparse('<x>xxx<y>yyy</y></x>');
    s = hxmlstr(i);
    assert(s == '<x>xxx<y>yyy</y></x>');
    i = new TXMLTree('<x>xxx<y>yyy</y></x>');
    s = i.tostr();
    assert(s == '<x>xxx<y>yyy</y></x>');
    s = i.tostr(0)
    assert(s == '<x>xxx
      <y>yyy</y>
    </x>
    ');
    
    /* For example a WBXML tag configuration that the name is wbxmltest
       <token>
          <tag>
             <item name="aaa" id="5"/>
             <item name="bbb" id="6"/>
             <item name="ccc" id="7"/>
          </tag>
       </token>
     */
    x = new TXMLTree('<aaa>111<bbb>222</bbb><ccc>333</ccc></aaa>');
    assert(x.wbxmlencode('wbxmltest')
       == '\01\01\03\00\45\03111\00\46\03222\00\01\47\03333\00\01\01');

NAME

    hxmldup, TXMLTree::dup


SYNOPSIS

    TXMLtree hxmldup(TXMLTree i)
    TXMLTree TXMLtree::dup()


DESCRIPTION

    To duplicate a TXMLTree object


ARGUMENTS

    i: The handle of the TXMLtree object to be duplicated


RETURN

    The new duplicated object handle


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmldup(i);

NAME

    hxmldupelement, TXMLTree::dupelement


SYNOPSIS

    TXMLTree hxmldupelement(TXMLTree handle, TString path)
    TXMLTree TXMLTree::dupelement(TString path)


DESCRIPTION

    To duplicate an element of a TXMLTree object and create a new TXMLTree 
    element


ARGUMENTS

    handle: The TXMLTree object handle

    path: The path of the element to be duplicated


RETURN

    A new TXMLTree object handle


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmldupelement (i,'x/y');
    s = hxmlstr(j);
    assert(s == '<y>yyy</y>');

NAME

    hxmldeleteelement


SYNOPSIS

    TInteger  hxmldeleteelement( TInteger i, TString arg1)


DESCRIPTION

    To delete an element of a TXMLTree object


ARGUMENTS

    i: The handle of the TXMLTree object

    arg1: The path of the element to be deleted


RETURN

    0 is for success, -1 is for failure


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    hxmldeleteelement (i,'x/y');
    s = hxmlstr(i);
    assert(s == '<x>xxx</x>');

NAME

    hxmladdhead, TXMLTree::addhead, hxmladdtail, TXMLTree::addtail


SYNOPSIS

    TInteger hxmladdhead(TXMLTree i, TString path, TXMLTree j)
    TInteger TXMLTree::addhead(TString path, TXMLTree j)
    TInteger hxmladdtail(TXMLTree i, TString path, TXMLTree j)
    TInteger TXMLTree::addtail(TString path, TXMLTree j)


DESCRIPTION

    To duplicate a TXMLTree object and add this duplicated object to an 
    element of another TXMLTree object as a child. addhead() is to add as 
    the first child. addtail() is to add as the last child.


ARGUMENTS

    i: The TXMLTree object handle

    path: The element path

    j: The TXMLTree object to be duplicated


RETURN

    0 is for success and -1 is for failure


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmlparse('<a>aaa<b>bbb</b></a>');
    hxmladdhead (i,'x',j);
    s = hxmlstr(i);
    assert(s == '<x>xxx<a>aaa<b>bbb</b></a><y>yyy</y></x>');
    
    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmlparse('<a>aaa<b>bbb</b></a>');
    hxmladdtail (i,'x',j);
    s = hxmlstr(i);
    assert(s == '<x>xxx<y>yyy</y><a>aaa<b>bbb</b></a></x>');

NAME

    hxmladdleft, TXMLTree::addleft, hxmladdright, TXMLTree::addright


SYNOPSIS

    TInteger hxmladdleft(TXMLTree i, TString path, TXMLTree j)
    TInteger TXMLTree::addleft(TString path, TXMLTree j)
    TInteger hxmladdright(TXMLTree i, TString path, TXMLTree j)
    TInteger TXMLTree::addright(TString path, TXMLtree j)


DESCRIPTION

    To duplicate a TXMLTree object and add this duplicated object to another 
    TXMLTree object as a brother of an element. addleft() is to add as the 
    first brother. addright() is to add as the last brother.


ARGUMENTS

    i: The TXMLTree object handle

    path: The element path

    j: The TXMLTree object to be duplicated


RETURN

    0 is for success and -1 is for failure


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmlparse('<a>aaa<b>bbb</b></a>');
    hxmladdleft(i,'x/y',j);
    s = hxmlstr(i);
    assert(s == '<x>xxx<a>aaa<b>bbb</b></a><y>yyy</y></x>');
    
    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmlparse('<a>aaa<b>bbb</b></a>');
    hxmladdright(i,'x/y',j);
    s = hxmlstr(i);
    assert(s == '<x>xxx<y>yyy</y><a>aaa<b>bbb</b></a></x>');

NAME

    hxmlchangeelement


SYNOPSIS

    TInteger hxmlchangeelement(TXMLTree i, TString path, TXMLTree j)


DESCRIPTION

    To duplicate a TXMLTree object and replace an element of another TXMLTree 
    object to the duplicated node.


ARGUMENTS

    i: The handle of the TXMLTree object

    path: The path of the element to be replaced

    j: The handle of the TXMLTree object to be duplicated


RETURN

    0 for success and -1 for failure


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    j = hxmlparse('<a>aaa<b>bbb</b></a>');
    hxmlchangeelement(i, 'x/y', j);
    s = hxmlstr(i);
    assert(s == '<x>xxx<a>aaa<b>bbb</b></a></x>');

NAME

    hxmlelemname, TXMLTree::getelemname


SYNOPSIS

    TString hxmlelemname(TInteger handle, TString path, TInteger n)
    TString TXMLTree::getelemname(TString path, TInteger n)


DESCRIPTION

    To get the child tag name of an element of the TXMLTree object according 
    to the child index


ARGUMENTS

    handle: The handle of the TXMLTree object

    path: The path of the element

    n: The child index. 0 is for the first child


RETURN

    The child tag name. A null string will be returned if the path is not 
    valid or no child for the element


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    s = hxmlelemname(i, 'x', 0);
    assert(s == 'y');

NAME

    hxmlccbytag, TXMLTree::childcountbytag


SYNOPSIS

    TInteger hxmlccbytag(TXMLTree handle, TString path)
    TInteger TXMLtree::childcountbytag(TString path)


DESCRIPTION

    To get the element number that can match the path


ARGUMENTS

    handle: The handle of the TXMLTree

    path: The path


RETURN

    Element number integer


EXAMPLES

    i = hxmlparse('<a><b>b1</b><c>c1</c><d>d1</d><b>b2<c>cc1</c></b><c>c2<
    /c></a>') ;
    j = hxmlccbytag(i, 'a/b');
    assert(j == 2);

NAME

    hxmlchangecontent, TXMLTree::changecontent


SYNOPSIS

    TInteger hxmlchangecontent(TXMLtree handle, TString path, TString value)
    
    TInteger TXMLTree::changecontent(TString path, TString value)


DESCRIPTION

    To change the content of an element


ARGUMENTS

    handle: The handle of the TXMLTree

    path: The element path

    value: the new content string


RETURN

    0 is for success and -1 is for failure


EXAMPLES

    i = hxmlparse('<x>xxx<y>yyy</y></x>');
    hxmlchangecontent(i,'x/y','test');
    s = hxmlstr(i);
    assert(s == '<x>xxx<y>test</y></x>');

NAME

    hxmlsetattr


SYNOPSIS

    TInteger hxmlsetattr(TInteger i, TString path, TString attrName, TString 
    attrValue)


DESCRIPTION

    To set the value of an attribute of an element


ARGUMENTS

    i: The handle of the TXMLTree object

    path: The element path

    attrName: The attribute name

    attrValue: The new attribute value to be set


RETURN

    0 for success and -1 for failure


EXAMPLES

    i = hxmlparse('<x a="1">123</x>');
    hxmlsetattr(i, 'x', 'a', '2');
    s = hxmlstr(i);
    assert(s == '<x a="2">123</x>');

NAME

    hxmlgetattr, TXMLTree::getattrvalue


SYNOPSIS

    TString hxmlgetattr(TMXLTree handle, TString path, TString default)
    
    TString TXMLTree::getattrvalue(TString path, TString default)


DESCRIPTION

    To get the value of an attribute according to a path. The last node 
    of the path is the attribute name


ARGUMENTS

    handle: The handle of the TXMLTree object

    path: The path of the attribute

    default: The default value


RETURN

    The attribute value


EXAMPLES

    i = hxmlparse('<x>xxx<y cvd:z="aaa">yyy</y></x>');
    s = hxmlgetattr(i, 'x/y/z', '');
    s1 = i.getattrvalue('x/y/cvd:z','null');
    s2 = i.getattrvalue('x/y/z','null');
    assert(s == 'aaa');
    assert(s1 == 'aaa');
    assert(s2 == 'aaa');

NAME

    hxmlelement


SYNOPSIS

    TInteger hxmlelement(TString tag, TString content)


DESCRIPTION

    To construct a simple TXMLTree object using a tag name and a content 
    string


ARGUMENTS

    tag: The tag name

    content: The content string


RETURN

    The constructed TXMLTree object handle


EXAMPLES

    i = hxmlelement('aaa', 'bbb');
    s = hxmlstr(i);
    assert(s == '<aaa>bbb</aaa>');

NAME

    hxmlelem, hxmlattr


SYNOPSIS

    TXMLTree hxmlelem(TString tagname, ... )
    TXMLTree hxmlattr(TString attrname, TString attrvalue)


DESCRIPTION

    These two functions is to construct a complex TXMLTree object


ARGUMENTS

    tagname: The tag name to construct element

    attrname: The attribute name to construct attribute

    attrvalue: The attribute value to construct attribute

    ...: A content string, or an element, or an attribute


RETURN

    The handle of a TXMLTree object


EXAMPLES

    i = hxmlelem('authorize',
           hxmlelem('accountnumber',
              '11111111111',
              hxmlattr('password', '123')
           ),
           hxmlelem('pin', '1111')
        );
    s = hxmlstr(i);
    assert(s == '<authorize><accountnumber password="123">11111111111</accountnumber>
    
    <pin>1111</pin></authorize>', s);
    delete(i);

NAME

    hxmldupwoods


SYNOPSIS

    TXMLTree hxmldupwoods(TString path)


DESCRIPTION

    To duplicate an element from the xmlwoods and return a new TXMLTree 
    object


ARGUMENTS

    path: The path of the xmlwoods


RETURN

    The new object handle. -1 is returned for failure


EXAMPLES

    var TXMLTree x = hxmldupwoods('smp');

NAME

    xmlwoods, xmlwoodsassign, TXMLTree::query


SYNOPSIS

    TString xmlwoods(TString path, TString defaultValue, TInteger useCache=
    1)
    TString xmlwoodsaggign(TString path, TString var1, TString subPath1,
     ...)
    TString TXMLtree::query(TString path, TString var1, TString subPath1,
     ...)


DESCRIPTION

    xmlwoods and xmlwoods assign functions are to get the value from the 
    xmlwoods configuration. The value can be get by a xml path. A query condition 
    can be used in the path. xmlwoods function returns the value got. the 
    xmlwoodsassign can get a xml node according to the path, and can assign 
    several variables to the attribute values of this node. 
    TXMLTree::query is to get value from a xml tree. The arguments and return 
    values is same as xmlwoodsassign function


ARGUMENTS

    path: The path. A query condition enclosed in [] can be used in the 
    path. The grammar of the condition is:
    EXPRESSION: TERM   '||' TERM 
    TERM: FACTOR  '&&' FACTOR
    FACTOR:  '@'NAME OP VALUE | '(' EXPRESSION  ')'
    OP: '=' | '>' | '<' | '>=' | '<=' | '!='
    For example:
    PPC:service/config[0]/menu[@level=1 && @key=2]
    PPC:service/config[0]/menu[@level=1 ]/submenu[(@level=1 || @level=2) 
    && @key=3]

    defaultValue: The default value, If the path is not valid, return the 
    default value

    useCache: Indicate using cache or not. The catch will be used by default.
     If the query condition includes variable ( for example the phone number)
    , 0 will be used for not using the catch.

    var1,var2...: String variables will be assigned

    subPath1,subPath2...: Sub path for the attributes to assign


RETURN

    For xmlwoods return the value. for xmlwoodsassign or TXMLTree::query 
    return the number of variables that is assigned value successfully.


EXAMPLES

    /*
    For example the xml file: $CINDIR/xmlwoods/PPC
    <service>
    <config>
      <menu level="1"  key="1">
        <submenu level="1" key="1" desc="PROMPT_CCARD1" msgid="1111" func=
    "PCCARD1"/>
      </menu>
      <menu level="1"  key="2">
        <submenu level="1" key="2" desc="PROMPT_CCARD2" msgid="1212" func=
    "PCCARD2"/>
      </menu>
      <menu level="1"  key="1">
        <submenu level="1" key="4" desc="PROMPT_CCARD1" msgid="1114" func=
    "PCCARD1"/>
      </menu>
      <menu level="1"  key="2">
        <submenu level="1" key="3" desc="PROMPT_CCARD2" msgid="1213" func=
    "PCCARD2"/>
      </menu>
      <menu level="2"  key="1">
        <submenu level="2" key="1" desc="PROMPT_CCARD5" msgid="2121" func=
    "PCCARD5"/>
      </menu>
      <menu level="2"  key="2">
        <submenu level="2" key="2" desc="PROMPT_CCARD6" msgid="2222" func=
    "PCCARD6"/>
      </menu>
    </config>
    </service>
    */
    var TString query, msgid, func, desc;
    query = 'PPC:service/config[0]/menu[@level=1&&@key=2]/submenu[@level=
    1&&@key=3]';
    var TInteger n = xmlwoodsassign(query
       , msgid, 'msgid' // submenu/msgid -> var msgid
       , func, 'func'  // submenu/func -> var func
       , desc,'desc' // submenu/desc -> var desc
       );
    assert(n == 3);
    assert(msgid == '1213');
    assert(func == 'PCCARD2');
    assert(desc == 'PROMPT_CCARD2');
    
    var TXMLTree x = new TXMLTree('<a>
    <b a="1" b="a"/>
    <b a="2" b="b"/>
    <b a="3" b="c"/>
    <b a="4" b="d"/>
    </a>');
    var TString s1, s2;
    x.query('a/b[@a=1]', s1, 'b', s2, 'a');
    assert(s1 == 'a');
    assert(s2 == '1');

NAME

    xmlwoodscc


SYNOPSIS

    TString  xmlwoodscc(TString path, TString tag='')


DESCRIPTION

    To get the children number with the same tag name from an element of 
    the xmlwoods


ARGUMENTS

    path: The element path

    tag: The tag name. This value can be a null string for getting the number 
    of all children


RETURN

    The children number


EXAMPLES

    var TInteger irule = xmlwoodscc('diameterconfig:config/rule2');
    assert(irule == 5);
    
    var TInteger ichargenum = xmlwoodscc('diameterconfig:config/rule2','
    chargenum');
    assert(ichargenum == 3);
    

NAME

    xmltextencode, xmltextdecode, vxmltextencode, vxmltextdecode


SYNOPSIS

    TString xmltextencode(TString arg1)
    TString xmltextdecode(TString arg1)
    TString vxmltextencode(TString arg1)
    TString vxmltextdecode(TString arg1)


DESCRIPTION

    encode() is to translate some special character to the xml entity. For 
    example, < to '&lt;', > to '&gt;'. decode() is opposite. vxml is stricter 
    than xml


ARGUMENTS

    arg1: The string to be converted


RETURN

    The translate result string


EXAMPLES

    s = xmltextencode('<a/b[0]>');
    assert(s == '&lt;a/b[0]&gt;');

NAME

    tcpsend


SYNOPSIS

    TInteger tcpsend(TString logicName, TInteger linkID, TString s, TInteger 
    length)


DESCRIPTION

    To send a tcp message according to the socket logic name and link ID.
     This function is used for permanent connection for client or server

    

ARGUMENTS

    logicName: The socket logic name, It is configured in the config.server.
    * or config.client.* file

    linkID: The link id

    s: The string to be sent

    length: The length to be sent. If the value is 0, the whole s will be 
    sent and one byte that the value is 0 will be sent for string end. If 
    the value is greater than the length of s, the whole s will be sent


RETURN

    0 is for success and a negative value is for failure


NAME

    udpsend, udpsendbyname


SYNOPSIS

    TInteger udpsend(TString host, TInteger port, TString s)
    TInteger  udpsendbyname(TString host, TInteger port, TString s, TString 
    logicName)


DESCRIPTION

    udpsend() is to send a UDP message and it can not indicate a sending 
    party port number, and need to config the config.udp.*. udpsendbyname(
    ) can specify a sending port


ARGUMENTS

    host: The destination host name

    port: The destination port number

    s: The string to be sent

    logicName: The logic name that configured the UDP sending port. It is 
    configured in the config.server.*, using udp protocol


RETURN

    0 is for success and a negative value is for failure


NAME

    tcpconnectsend


SYNOPSIS

    TInteger tcpconnectsend(TString logicName, TString host, TInteger port,
     TString s, TInteger length)


DESCRIPTION

    To connect a socket server according to the host and port and send a 
    message to the server


ARGUMENTS

    logicName: The logic name. It is configured in config.client.* file

    
    host: The host name. If it is a null string, the host name and port 
    configured in the config.client.* file will be used.

    port: The port number

    s: The string to be sent

    length: The length to be sent. If the value is 0, the whole s will be 
    sent and one byte that the value is 0 will be sent for string end. If 
    the value is greater than the length of s, the whole s will be sent


RETURN

    If success, the new link ID will be returned. A negative is returned 
    for failure


NAME

    tcpdeletelink


SYNOPSIS

    TInteger tcpdeletelink(TString logicName, TInteger linkID, TString key)
    


DESCRIPTION

    To delete a socket link


ARGUMENTS

    logicName: The logic name. It is configured in the config.server.* or 
    cofnig.client.* file

    linkID: The link ID

    key: The key correlated to the link. If it is a null string, only link 
    ID is used.


RETURN

    0 for success


NAME

    tcpalivename


SYNOPSIS

    TInteger tcpalivename(TString logicName1, TString logicName2)


DESCRIPTION

    To get one socket logic name that has an alive socket link from two 
    logic names


ARGUMENTS

    logicName1: One logic name

    logicName2: Another logic name


RETURN

    The ok logic name


NAME

    tcpaliveinesclient


SYNOPSIS

    TString tcpaliveinesclient(TString name)


DESCRIPTION

    To get an alive client name for a server. This function is only for 
    text0ines protocol. If there are more than one clients is alive, the 
    client name will be returned one by one.


ARGUMENTS

    name: The logic name of the server


RETURN

    The alive client name


NAME

    tcpalivelink


SYNOPSIS

    TInteger tcpalivelink(TString logicName)


DESCRIPTION

    To get an alive link ID from a socket


ARGUMENTS

    logicName: The logic name of the socket


RETURN

    The alive socket link ID


NAME

    tcpconnect


SYNOPSIS

    TInteger tcpconnect(TString logicName, TString host, TInteger port)

    

DESCRIPTION

    To connect to a host as a socket client


ARGUMENTS

    logicName: The logic name. It is configured in file config.client.*

    
    host: The destination host name

    port: The destination port


RETURN

    A new link ID will be returned. Negative value is returned for failure

    

NAME

    tcpprotocoltype


SYNOPSIS

    TString tcpprotocoltype(TString logicName)


DESCRIPTION

    To get the protocol type of the socket


ARGUMENTS

    logicName: The logic name


RETURN

    The protocol type


NAME

    tcpsetlinkstate


SYNOPSIS

    TString tcpsetlinkstate(TString name, TInteger link, TInteger state)
    


DESCRIPTION

    To set the socket name of a socket link


ARGUMENTS

    name: The logic name

    link: The link ID

    state: The state to set:
    0: CLOSE
    1: OPEN
    2: CONNECTING
    3: PREPARING
    4: SHUTDOWN


RETURN

    


NAME

    getserviceid


SYNOPSIS

    TInteger getserviceid()


DESCRIPTION

    To get the ID of this running service logic


ARGUMENTS

    ÎÞ

RETURN

    Integer


EXAMPLES

    var TInteger isvcid;
    isvcid = getserviceid();
    assert(isvcid == 1001);
    //1001ÎªÖ´ÐÐÒµÎñµÄID

NAME

    getscfid, getglobalscfid


SYNOPSIS

    TInteger getscfid()
    TInteger getglobalscfid()


DESCRIPTION

    getscfid() is to get the local ID of this SCF process. getglobalscfid(
    ) is to get the global ID of this SCF process. The global SCF ID is configured 
    in file conig.globalscfid


ARGUMENTS

    ÎÞ

RETURN

    Integer


NAME

    getetccorrelationid, getetcscfid


SYNOPSIS

    TString getetccorrelationid()
    TString getetcscfid()


DESCRIPTION

    The get the string value of CorrelationID and SCFID parameter to construct 
    the argument of the ETC operation of INAP


ARGUMENTS

    ÎÞ

RETURN

    String


NAME

    getfsmid, getparentfsmid


SYNOPSIS

    TInteger getfsmid()
    TInteger getparentfsmid()


DESCRIPTION

    getfsmid() is to get the ID of the FSM to execute the service logic.
     getparentfsm() is to get the ID of the parent FSM to create this FSM

    

ARGUMENTS

    ÎÞ

RETURN

    Integer


NAME

    getfsmidstr


SYNOPSIS

    TString getfsmidstr()


DESCRIPTION

    To get a string include scf ID and fsm ID


ARGUMENTS

    ÎÞ

RETURN

    A string. The first 2 bytes is scf ID, and the other bytes is fsm ID

    

EXAMPLES

    var TInteger fsmid;
    var TString fsmidstr;
    fsmid = getfsmid(); // may be 1, fsmid
    fsmidstr = getfsmidstr(); // may be '001', '00' is scf ID

NAME

    nice


SYNOPSIS

    TInteger nice(TInteger priority)


DESCRIPTION

    To set the priority number. If there are many concurrent service logic 
    execution instance, this function can be used to get more execution opportunity.
    


ARGUMENTS

    priority: The prioroty number. The value can be an integer between 1-
    1000. The larger value means higher priority


RETURN

    0


NAME

    setmaxobjects


SYNOPSIS

    TInteger setmaxobjects(TInteger maxobjects)


DESCRIPTION

    This function is to set the max size of the FSM object pool. The default 
    size is 200 if this function has never been called. If some application 
    need objects more than 200, you can call this function to enlarge the 
    size.


ARGUMENTS

    maxobjects: Integer. The valid value is between 200-10000


RETURN

    0


NAME

    exit


SYNOPSIS

    TInteger exit()


DESCRIPTION

    To exit the service logic execution. If exit() is called, the service 
    logic execution will be end immediately and the fsm will be deleted


ARGUMENTS

    ÎÞ

RETURN

    0


NAME

    setprimitivestart


SYNOPSIS

    TInteger setprimitivestart()


DESCRIPTION

    To set the service logic execution mode to be primitive mode. The primitive 
    mode is that the service login will occupy all the process resource


ARGUMENTS

    ÎÞ

RETURN

    0


NAME

    sleep


SYNOPSIS

    TInteger sleep(TInteger n)


DESCRIPTION

    To sleep some seconds


ARGUMENTS

    n: An integer that the unit is second


RETURN

    0


NAME

    repeat


SYNOPSIS

    TInteger repeat(initialAction, TInteger conditialExp, actions ...)


DESCRIPTION

    To do some expression repeatlly. For some simple loopment in the service 
    logic, this function can be used to improve the performance. To avoid 
    the dead loop, the max loop number is 10000.


ARGUMENTS

    initialAction: An expression for initialization. This expression is 
    only be executed one time

    conditionExp: A condition expression. This condition will be checked 
    each loop. If the condition expression is false, the loopment will be 
    broken.

    actions ...: Many action expressions. These expressions will be executed 
    once each loop


RETURN

    0


EXAMPLES

    // To print: 0 0 2 2000 4 4000...
    var TInteger i;
    repeat(i=0, i<100, print(itoa(i)), print(itoa(i*1000)), i=i+2);
    
    // To calculate the sum of the second column of the table
    var TSCPTable t;
    var TInteger i, sum=0, rowCount;
    ...
    rowCount = t.rowcount();
    repeat(i=1, i<=rowCount, sum+=atoi(t[i++][2]));

NAME

    limit


SYNOPSIS

    TInteger limit(TString key, TInteger number, TInteger rateLimit)


DESCRIPTION

    To limit the service logic concurrent execution number. The limitation 
    can be according to the instances number and the invocation rate.


ARGUMENTS

    key: The key to identify one limitation

    number: The max concurrent number for number limitation or the max invocation 
    number per second for rate limitation

    rateLimit: 0 is for number limitation. 1 is for rate limitation. The 
    default value is 0


RETURN

    Values greater than or equal to 0 are returned for passed the limitation.
     Other values are returned for not passed the limitation


EXAMPLES

    #progma c
    void main()
    {
       var TInteger i;
       i=limit('123',10);
       print(itoa(i));
       if(i>=0)
       {
          print('limit passed');
          sleep(10);
       }
       else
       {
          print('limit not pass');
       }
    }

NAME

    queue


SYNOPSIS

    TInteger queue(TString key, TInteger maxServer, TInteger maxQueue, TInteger 
    waitTime)


DESCRIPTION

    To queue for waiting some resources duration the service logic execution

    

ARGUMENTS

    key: The queue identifier

    maxServer: The max resource number for this queue.

    maxQueue: The max queue length

    waitTime: The max waiting time duration in queue


RETURN

    0: got the resource, and need not queue; 1: to queue; 2: the queue is 
    full


EXAMPLES

    #progma c
    void work()
    {
       print('begin work');
       sleep(20);
       print('end work');
    }
    
    void main()
    {
       var TInteger i;
       i=queue('123',2,5,50);
       if(i==0)  // got the resource
       {
          print('queue pass, to work');
          work();
          return;
       }
       if(i==2) // queue is full
       {
          print('queue full, exit');
          return;
       }
       print('in queue');
       sleep(200);  // wait in queue
    
       on(queueResourceFree)  // some resource is free
       {
          print('resource free');
          work();
          return;
       }
       on(queueTimerExpire) // timeout
       {
          print('time out, exit');
          return;
       }
    }

NAME

    queuefree


SYNOPSIS

    TInteger queuefree(TString key)


DESCRIPTION

    To free one resource for a queue.


ARGUMENTS

    key: The identifier of the queue


RETURN

    


NAME

    promptwarning


SYNOPSIS

    TInteger promptwarning(TString s)


DESCRIPTION

    The service logic calls this function to prompt a message and wait user 
    input.


ARGUMENTS

    s: The message to prompt


RETURN

    If user input 'yes' and enter, this function will return 1. If user 
    input 'no' and enter, this function will throw an exception. If there 
    are no exception processing, the service logic will be end'


NAME

    traceon


SYNOPSIS

    TInteger traceon()


DESCRIPTION

    Set the fsm to trace. After the function called, trace information will 
    be displayed


ARGUMENTS

    ÎÞ

RETURN

    0


NAME

    istraced


SYNOPSIS

    TInteger istraced()


DESCRIPTION

    Check whether a fsm is traced currently


ARGUMENTS

    ÎÞ

RETURN

    1: is traced, 0: is not traced


NAME

    st, stset


SYNOPSIS

    TInteger st(TString name, TInteger value)
    TInteger stset(TString name, TInteger value)


DESCRIPTION

    To generate the statistics information according to a name. st() is 
    for accumulating and stset is for assignment


ARGUMENTS

    name: The name of the statistics item

    value: for st(), this is the value to be added. For stset() this is 
    the value to be set


RETURN

    0


EXAMPLES

    st('O_Abandon',1)

NAME

    print, printbin


SYNOPSIS

    TString print(TString s)
    TString printbin(TString s)


DESCRIPTION

    To output some information to the terminal screen. If all characters 
    in the string are printable, you can use print() function. If not, you 
    must use printbin() function. The output of these two functions can be 
    switched off or switched on using 'display' command


ARGUMENTS

    s: The content to be output


RETURN

    A null string


NAME

    tracetext, tracebin


SYNOPSIS

    TInteger tracetext(TString s)
    TInteger tracebin(TString s)


DESCRIPTION

    To send some trace information to other process using UDP. If all characters 
    in the string are printable, you can use print() function. If not, you 
    must use printbin() function. The sending of these two functions can 
    be switched off or switched on using 'display' command


ARGUMENTS

    s: The content to be output


RETURN

    0


NAME

    alarm, alarminfo, log


SYNOPSIS

    TInteger alarm(TString s)
    TInteger alarminfo(TInteger id, TInteger level, TString s)
    TInteger log(TString s)


DESCRIPTION

    To output a warning information to the screen and the SCF.INFO.* file.
     alarm() use the fix error ID 11000. alarminfo() can define the error 
    ID and level. log() use the fix error ID 10708 and can output some information 
    of this fsm. output of log() can be switched on or switch off using '
    display -servicelog|-noservicelog' command.


ARGUMENTS

    id: The user defined error ID. The value must be between 90000-99999

    
    level: The user defined error level. The value must be between 0-6

    s: The information to be output


RETURN

    0


EXAMPLES

    alarminfo(90000, 1, 'connect fail');

NAME

    term


SYNOPSIS

    TInteger term(TString s)


DESCRIPTION

    To output some information to the inaccess terminnal


ARGUMENTS

    s: The string to be output


RETURN

    


NAME

    assert


SYNOPSIS

    TInteger assert(TInteger boolExpression, TString userInfo='')


DESCRIPTION

    To assert that a boolean expression is true. If the expression is true,
     this function will do nothing. If the expression is false, this function 
    will output the 10949 warning information to the screen and the SCF.INFO.
    * file.


ARGUMENTS

    boolExpression: The boolean expression to be asserted

    userInfo: The information to be output if the expression is false


RETURN

    0


NAME

    getlastsibname


SYNOPSIS

    TString getlastsibname()


DESCRIPTION

    To get the last executed sib name. This function is used for log some 
    error information


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    shareinfo, getsharedinfo


SYNOPSIS

    TInteger shareinfo(TString info)
    TString getsharedinfo(TString fsmKey, TString keyName='')


DESCRIPTION

    shareinfo() can share some information to other FSMs. getsharedinfo(
    ) is to get the shared infomation of one FSM


ARGUMENTS

    info: The information to share. It is a string that can be constructed 
    according to the requirement.

    fsmKey: The key of the FSM. This key can be set by setkey() function.
     If the key is invalid, an exception can be generated

    keyName: The name of the key. It is same as the name argument of setkey(
    ) function.


RETURN

    shareinfo() returns 0. getsharedinfo() returns the shared information

    

EXAMPLES

    // one slpl program
    void main()
    {
       setkey('AAA', '12345');
       shareinfo('abcde');
       sleep(100);
    }
    // the other slpl program
    void main()
    {
       assert(getsharedinfo('12345', 'AAA')=='abcde');
    }

NAME

    setkey, deletekey, searchkey


SYNOPSIS

    TInteger setkey(TString keyName,TString keyValue)
    TInteger deletekey(TString keyName,TString keyValue)
    TString searchkey(TString keyName,TString keyValue)


DESCRIPTION

    setkey(), clearkey() and searchekey() are for the correlation of FSMs.
    
    The rules:
    1. Key is a key-pair that is consist of keyName and keyValue. A key-
    pair is unique in one scf process.
    2. More than one key-pair can be set in one FSM. For same keyName, more 
    than one keyValue can be set in one FSM
    3. For deletekey, if the keyValue is null string, all key-pair for the 
    keyName will be deleted
    4. Key-pair can only be deleted by the FSM which set the key-pair before.
    
    5. All key-pair for one FSM will be cleared when the FSM is deleted.
    


ARGUMENTS

    keyName: The name of the key. If it is null string, it is the default 
    key

    keyValue: The value of the key. It can not be null string


RETURN

    setkey() and deletekey() return 1 for success and return 0 for failure.
     searchkey() returns the fsm id string (format: xxyyyy, xx is scf id,
     yyyy is fsm id) and returns null string if the key is invalid.


EXAMPLES

    #progma c
    void main()
    {
       var TString key1, key2, key3;
       var TString value1, value2, value3, value4;
       var TInteger re;
       var TString s;
    
       print(sprintf('myinstanceid :%s',myinstanceid));
       key1='AAA';
       key2='BBB';
       key3='CCC';
       value1='a';
       value2='b';
       value3='c';
       value4='d';
       re=setkey(key1,value1);
       print(sprintf('set value1 re:%d',re));
       re=setkey(key1,value1);
       print(sprintf('set value1 re:%d',re));
       re=setkey(key2,value2);
       re=setkey(key3,value3);
       re=setkey(key1,value4);
       s=searchkey(key1,value1);
       print(sprintf('search value1 re:%s',s));
       s=searchkey(key1,value4);
       print(sprintf('search value1 re:%s',s));
       re=deletekey(key1,value4);
       s=searchkey(key1,value4);
       print(sprintf('search value4 re:%s',s));
       sleep(30);
    }

NAME

    bigintoper


SYNOPSIS

    TString bigintoper(TString i1,TString i2 ,TString op, TInteger type=
    10 )


DESCRIPTION

    To do the calculation for the big integer in string format


ARGUMENTS

    i1: The operand

    i2: The operand

    op: The operator. It can be '+' '-' '*' '/' '%'

    type: Default value is 10 for decimal


RETURN

    The calculation result


EXAMPLES

    var TString s;
    s = bigintoper('666666666666666666666666666','37483473847384748347384'
    ,'+',10);
    assert(s == '666704150140514051415014050');
    s = bigintoper('666666666666666666666666666','37483473847384748347384'
    ,'-',10);
    assert(s == '666629183192819281918319282');
    s = bigintoper('666666666666666666666666666','37483473847384748347384'
    ,'*',10);
    assert(s == '24988982564923165564922666641677684101743501101744');
    s = bigintoper('666666666666666666666666666','37483473847384748347384'
    ,'/',10);
    assert(s == '17785');
    s = bigintoper('666666666666666666666666666','37483473847384748347384'
    ,'%',10);
    assert(s == '23084290928917308442226');

NAME

    trimfloatstr2, floattosciense


SYNOPSIS

    TString trimfloatstr2(TString f, TInteger e)
    TString floattosciense(TString f)


DESCRIPTION

    trimfloatstr2() is to convert a float string and an exponent of 10 to 
    one float string. floattosciense() is to convert a float string to an 
    integer string and an exponent of 10. The conversion do not lose significant 
    digits


ARGUMENTS

    f: The float string

    e: The exponent of 10


RETURN

    trimfloatstr2() returns a float string. floattosciense() returns a integer 
    string and an exponent of 10


EXAMPLES

    assert(floattosciense('1.1') == '11|-1');
    assert(floattosciense('1.11111') == '111111|-5');
    assert(floattosciense('11111') == '11111|0');
    assert(floattosciense('100000') == '1|5');
    assert(floattosciense('11100000') == '111|5');
    assert(trimfloatstr2('111',5) == '11100000');
    assert(trimfloatstr2('1',5) == '100000');
    assert(trimfloatstr2('11111',0) == '11111');
    assert(trimfloatstr2('111111',-5) == '1.11111');
    assert(trimfloatstr2('1.11111',-5) == '0.0000111111');

NAME

    globaldis


SYNOPSIS

    TDouble globaldis(TDouble x1, TDouble y1 ,TDouble x2, TDouble x2, TDouble 
    r=6371.004)


DESCRIPTION

    To calculate the distance of two point of a global


ARGUMENTS

    x1: The longitude the first point

    y1: The latitude of the first point

    x2: The longitude the second point

    y2: The latitude of the second point

    r: The radius of the global. The unit is kilometer


RETURN

    The distance that the unit is kilometer


EXAMPLES

    assert(globaldis(116.4, 39.9, 121.4, 31.2, 6370) == 1067.273602186433)
    ;
    

NAME

    abs, TDouble::abs


SYNOPSIS

    TInteger abs(TInteger x)
    TDouble TDouble::abs()


DESCRIPTION

    To get the absolute value


ARGUMENTS

    x: The integer


RETURN

    The absolute value


EXAMPLES

    var TInteger i;
    var TDouble d;
    i = -10;
    assert(abs(i) == 10);
    d = -1.234;
    assert(d.abs() == 1.234);

NAME

    TDouble::sin, TDouble::cos, TDouble::tan, TDouble::asin, TDouble::acos,
     TDouble::atan


SYNOPSIS

    TDouble TDouble::sin()
    TDouble TDouble::cos()
    TDouble TDouble::tan()
    TDouble TDouble::asin()
    TDouble TDouble::acos()
    TDouble TDouble::atan()


DESCRIPTION

    To get the trigonometric value


ARGUMENTS

    ÎÞ

RETURN

    The trigonometric value


EXAMPLES

    var TDouble d, d1;
    d1 = d.sin();
    d1 = d.cos();
    d1 = d.tan();
    d1 = d.asin();
    d1 = d.acos();
    d1 = d.atan();

NAME

    TDouble::ceil, TDouble::floor, TDouble::round


SYNOPSIS

    TDouble TDouble::ceil()
    TDouble TDouble::floor()
    TDouble TDouble::round()


DESCRIPTION

    ceil() is to computes the smallest integral value not less than this 
    TDouble value. floor() is to compute the largest integral value not greater 
    than this TDouble value. round() is to compute the value round to this 
    TDouble value.


ARGUMENTS

    ÎÞ

RETURN

    The computed result


EXAMPLES

    var TDouble d = 1.6;
    assert(d.ceil() == 2);
    assert(d.floor() == 1);
    assert(d.round() == 2);

NAME

    TDouble::log, TDouble::log10


SYNOPSIS

    TDouble TDouble::log()
    TDouble TDouble::log10()


DESCRIPTION

    log() is to get the natural logarithm value of this TDouble value. log10(
    ) is to get the logarithm value base 10


ARGUMENTS

    ÎÞ

RETURN

    The logarithm value


NAME

    TDouble::sqrt


SYNOPSIS

    TDouble TDouble::sqrt()


DESCRIPTION

    To get the square root of this TDouble value


ARGUMENTS

    ÎÞ

RETURN

    The square root value


NAME

    TDouble::pow


SYNOPSIS

    TDouble TDouble::pow(TDouble x)


DESCRIPTION

    To get the power value of this TDouble value according to an exponent

    

ARGUMENTS

    x: The exponent


RETURN

    The power value


EXAMPLES

    var TDouble d = 1.5
    assert(d.pow(2) == 2.25)

NAME

    min, max


SYNOPSIS

    TInteger min(TInteger i, ... )
    TDouble min(TDouble i, ... )
    TInteger max(TInteger i, ... )
    TDouble max(TDouble i, ... )


DESCRIPTION

    min() is to get the value of the smallest argument. max() is to get 
    the value of the largest argument


ARGUMENTS

    i...: The arguments to compare. The argument number is between 2-30

    

RETURN

    The smallest or largest argument


EXAMPLES

    var TInteger i;
    var TDouble x;
    i = min(10, 5, 8, 12, 4, 6);
    assert(i == 4);
    i = max(10, 5, 8, 12, 4, 6);
    assert(i == 12);
    x = min(10, 5.1, 8, 12, 4.2, 6);
    assert(x == 4.2);
    x = max(10, 5.1, 8, 12.2, 4, 6);
    assert(x == 12.2);

NAME

    numbertrans, keymatch


SYNOPSIS

    TString numbertrans(TString src, TInteger type)
    TString keymatch(TString src, TInteger type)


DESCRIPTION

    To match the first column of file $CINDIR/etc/numbertab and return the 
    second column. numbertrans() is used to get the prefix of the telephone 
    number for charging. keymatch() is used for key word filtering. keymatch(
    ) can match from any place of the source string. The lines for key match 
    in numbertab file must start with 'F'


ARGUMENTS

    src: The string to match

    type: The match rule. 12 is for longest match and 11 is for shortest 
    match


RETURN

    The second column string is return if matching success. A null string 
    is returned if matching failure


EXAMPLES

    /*
    # the numbertab file
    030 309999
    0306223 21890
    F030 a
    */
    assert(numbertrans('0306223', 11) == '309999');
    assert(numbertrans('0306223', 22) == '21890');
    assert(numbertrans('003000', 12) == '');
    assert(keymatch('003000', 2) == 'a');

NAME

    random


SYNOPSIS

    TInteger random(TInteger i)


DESCRIPTION

    To get a random number


ARGUMENTS

    i: The range of the random value


RETURN

    The random number that the value is between 0 and i-1


EXAMPLES

    i = random(100);
    assert(i>=0 && i<=99);

NAME

    streamnumber


SYNOPSIS

    TInteger streamnumber(TString key, TInteger i)


DESCRIPTION

    To get a stream number


ARGUMENTS

    key: A string to identify the stream number generator

    i: The range of the stream number


RETURN

    The stream number that the value is between 0 and i-1


EXAMPLES

    i = streamnumber('accountid', 100000000);

NAME

    checksum, checksum2, checksum3


SYNOPSIS

    TString checksum(TString s)
    TString checksum2(TString s)


DESCRIPTION

    To get the checksum of a string
    - checksum(), The result is sum of all characters of the string modulo 
    256
    - checksum2(), The result is XOR of all characters of the string


ARGUMENTS

    s: The string to be processed


RETURN

    A string only include one character


EXAMPLES

    str = checksum('12341');
    assert(str == '1');

NAME

    hcode


SYNOPSIS

    TString hcode(TString number)


DESCRIPTION

    To get the HCODE according to the config.hcode configuration


ARGUMENTS

    number: The MSISDN number


RETURN

    The HCODE


EXAMPLES

    void main()
    {
       var TString areaCode,msisdn;
       msisdn = '13910590001';
       areaCode = hcode(msisdn);
       ...
    }

NAME

    mscidtoloc


SYNOPSIS

    TString mscidtoloc(TString mscid)


DESCRIPTION

    To get the MSCID according to the config.mscid configuration


ARGUMENTS

    mscid: The MSCID


RETURN

    The area code


EXAMPLES

    void main()
    {
       var TString areaCode,mscid;
       mscid = '360001';
       areaCode = mscidtoloc(mscid);
       ...
    }

NAME

    tldntomscid


SYNOPSIS

    TString tldntomscid(TString tldn)


DESCRIPTION

    To get the MSCID according to the config.mscid configuration


ARGUMENTS

    tldn: the TLDN number


RETURN

    The MSCID


EXAMPLES

    void main()
    {
       var TString tldn,mscid;
       tldn = '13334710';
       mscid = tldntomscid(tldn);
       assert(mscid == '37288A');
       tldn = '8613334710'
       mscid = tldntomscid(tldn);
       assert(mscid == '37288A');
       tldn = '013334710';
       mscid = tldntomscid(tldn);
       assert(mscid == '37288A');
       tldn = '13334710999';
       mscid = tldntomscid(tldn);
       assert(mscid == '37288A');
    }

NAME

    []::length


SYNOPSIS

    TInteger []::length()


DESCRIPTION

    To get the length of an array


ARGUMENTS

    ÎÞ

RETURN

    integer, length of the array


EXAMPLES

    var TInteger i[] = {1,2,3};
    assert(i.length() == 3);

NAME

    []::tostr


SYNOPSIS

    TString []::tostr(TString sep='|')


DESCRIPTION

    To convert the elements of array to a string


ARGUMENTS

    sep: the separator character, default is '|'


RETURN

    converted string


EXAMPLES

    var TInteger i[] = {1,2,3};
    assert(i.tostr() == '1|2|3');
    assert(i.tostr(',') == '1,2,3');

NAME

    []::index


SYNOPSIS

    TInteger []::index(TypeOfArrayMember mem)


DESCRIPTION

    To get the index of an element of a array


ARGUMENTS

    mem: element content of the array. The type of this argument must be 
    the same as the array element. If the array is a TString array, the type 
    of this argument must be TString. If the array is a TInteger array, the 
    type of this argument must be a TInteger.


RETURN

    integer, the index. The first one is 0. If the element cannot be found,
     -1 will be returned


EXAMPLES

    var TInteger i[] = {1,2,3};
    assert(i.index(1) == 0);
    assert(i.index(2) == 1);
    assert(i.index(5) == -1);
    var TString s[] = {'aa','bb','cc'};
    assert(s.index('aa') == 0);
    assert(s.index('bb') == 1);
    assert(s.index('ddd') == -1);

NAME

    []::dup


SYNOPSIS

    TypeOfArrayMember[] []::dup()


DESCRIPTION

    To duplicate an array


ARGUMENTS

    ÎÞ

RETURN

    the duplicated array. The element type of the duplicated array must 
    be same as the element type of the source array


EXAMPLES

    var TInteger i[] = {1,2,3};
    var TInteger j[] = i.dup();

NAME

    []::pop, []::push, []::unshift, []::shift


SYNOPSIS

    TInteger []::push(TypeOfArrayMember mem)
    TypeOfArrayMember []::pop()
    TInteger []::unshift(TypeOfArrayMember mem)
    TypeOfArrayMember []::shift()


DESCRIPTION

    push() adds element to the end of an array, and pop() remove element 
    from the end of an array. shift() removes the first element from the 
    array and unshift() insert element at the beginning of an array


ARGUMENTS

    mem: push and unshift have this argument. It is the element to be added.
     It's type must be same as the array element


RETURN

    pop and unshift can return the element got. It's type is same as the 
    array element


EXAMPLES

    var TInteger i[] = {1,2,3};
    i.push(4);
    assert(i.tostr() == '1|2|3|4');
    i.unshift(0);
    assert(i.tostr() == '0|1|2|3|4');
    assert(i.pop() == 4);
    assert(i.tostr() == '0|1|2|3');
    assert(i.shift() == 0);
    assert(i.tostr() == '1|2|3');

NAME

    []::tojson, []::parsejson


SYNOPSIS

    TString []::tojson()
    TInteger []::parsejson(TString jsonStr)


DESCRIPTION

    tojson() is to convert the array contents to a JSON string. parsejson(
    ) is to parse a JSON string into the array and the former members of 
    the array will be cleared.


ARGUMENTS

    jsonStr: JSON string


RETURN

    tojson() returns the JSON string. parsejson() returns 1 for success 
    and 0 for failure


EXAMPLES

    var TInteger a[] = {123, 456, 789};
    assert(a.tojson() == '[123,456,789]');
    a.parsejson('[1,2,3,4]');
    assert(a.length() == 4);
    assert(a[0] == 1);
    assert(a[1] == 2);
    assert(a[2] == 3);
    assert(a[3] == 4);

NAME

    command


SYNOPSIS

    TString command(TString cmd)


DESCRIPTION

    To execute a command than can be used in inaccess console


ARGUMENTS

    cmd: The command string


RETURN

    The command result


NAME

    getenv


SYNOPSIS

    TString getenv(TString envName)


DESCRIPTION

    To get the value of the environment variable


ARGUMENTS

    envName: The name of the environment variable


RETURN

    The value of the environment variable


EXAMPLES

    s = getenv('CINDIR');

NAME

    gethostname, getusername, getprocname


SYNOPSIS

    TString gethostname()
    TString getusername()
    TString getprocname()


DESCRIPTION

    gethostname() is to get the host name. getusername() is to get the user 
    name. getprocname() is to get the first argument of scf start-up


ARGUMENTS

    ÎÞ

RETURN

    The name string


NAME

    getipaddress


SYNOPSIS

    TString  getipaddress( )


DESCRIPTION

    To get the IP address of this machine


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    delete


SYNOPSIS

    TInteger delete(handle)


DESCRIPTION

    To delete an object


ARGUMENTS

    handle: The handle of the object to be deleted. This argument is a reference 
    value and will be changed to TObject::NULL(-1) after calling this function

    

RETURN

    


NAME

    vxmlrun


SYNOPSIS

    TString vxmlrun(TString arg)


DESCRIPTION

    To execute a VXML instruction


ARGUMENTS

    arg: The VXML instruction


RETURN

    The vxml execution result.


EXAMPLES

    #progma c
    void main()
    {
       var TInteger i;
       var TString result;
    
       for(i=0;i<10000;i=i+1)
       {
          result=vxmlrun('http://192.168.2.217:31976/conf.vxml');
          while(pickword(result,' ',0)=='pc')
          {
             result=vxmlrun('next pcresult');
          }
          vxmlrun('next release');
       }
    }

NAME

    getsipnodeaddress


SYNOPSIS

    TString getsipnodeaddress(TString arg)


DESCRIPTION

    get node's ip according to node name


ARGUMENTS

    arg: node name


RETURN

    The ip of node


EXAMPLES

    #progma c
    void main()
    {
       var TString addresshost;
       addresshost =getsipnodeaddress('ms1');
       assert(addresshost=='192.168.2.237:50914');
    
    }

NAME

    TObject::type


SYNOPSIS

    TInteger TObject::type()


DESCRIPTION

    TObject is the parent object of all other objects. Other objects can 
    derive all methods of TObject. type() is to get the object type. 


ARGUMENTS

    ÎÞ

RETURN

    The object type. For example, TObject::HttpServerType, TObject::CommandLineType 
    or TObject::TCAPDialogueType


EXAMPLES

    void main(TObject obj)
    {
       var TCommandLine cmd;
       var THttpServer httpServer;
       if(obj.type() == TObject::CommandLineType)
       {
          cmd = (TCommandLine)obj;
          ...
       }
       else if(obj.type() == TObject::HttpServerType)
       {
          httpServer = (THttpServer)obj;
          ...
       }
       ...
    }
    

NAME

    TObject::getid, TObject::setid


SYNOPSIS

    TInteger TObject::setid(TString id)
    TString TObject::getid()


DESCRIPTION

    Other object can derive these two method of TObject. It is to identify 
    an object and search an object according to the ID.


ARGUMENTS

    id: The ID to set


RETURN

    setid() returns 0 for success. getid() returns the object ID string

    

EXAMPLES

    var TXMLTree x, y;
    x = new TXMLTree()
    x.setid('aaa');
    assert(x.getid()=='aaa');
    y = findobject(TXMLTree, 'aaa');

NAME

    THttpServer::getrequesttype


SYNOPSIS

    TString THttpServer::getrequesttype()


DESCRIPTION

    The get the method name from the request URL


ARGUMENTS

    ÎÞ

RETURN

    'GET' or 'POST'


EXAMPLES

    var TString strmethod;
    ......
    strmethod=serverObj.getrequesttype();
    assert(strmethod=='POST');
    

NAME

    THttpServer::gethost


SYNOPSIS

    TString THttpServer::gethost()


DESCRIPTION

    To get the host name and the port from the request URL


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    // For example the URL: http://192.168.2.205:8080?a=1&b=c
    // assert(httpServer.gethost() == '192.168.2.205:8080');

NAME

    THttpServer::getpath


SYNOPSIS

    TString THttpServer::getpath()


DESCRIPTION

    To get the path from the request URL


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TString sPath;
    sPath = serverObj.getpath();
    assert(sPath=='http/test');

NAME

    THttpServer::geturlvalue


SYNOPSIS

    TString THttpServer::geturlvalue(TString name)


DESCRIPTION

    To get the value of a parameter from the request URL


ARGUMENTS

    name: The name of the parameter


RETURN

    The value of the parameter


EXAMPLES

    // For example, the URL: http://192.168.2.205:8080?a=1&b=c
    assert(httpServer.geturlvalue('a') == '1');
    assert(httpServer.geturlvalue('b') == 'c');

NAME

    THttpServer::getreferer


SYNOPSIS

    TString THttpServer::getreferer()


DESCRIPTION

    To get the content of the 'Referer' header.


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TString strrefer;
    strrefer=serverObj.getreferer();
    print('strrefer:'+strrefer);

NAME

    THttpServer::getcontent


SYNOPSIS

    THttpContent THttpServer::getcontent()


DESCRIPTION

    To get the content and construct an object to return.


ARGUMENTS

    ÎÞ

RETURN

    The handle of the THttpContent object


EXAMPLES

    var THttpContent contObj;
    contObj = serverObj.getcontent();

NAME

    THttpServer::getprocessingduration


SYNOPSIS

    TInteger THttpServer::getprocessingduration (TInteger unit=1)


DESCRIPTION

    To get the time duration to process the request and send the response

    

ARGUMENTS

    unit: The unit of the duration. 0 is for second, 1 is for milisecond 
    and 2 is for microsecond


RETURN

    The time duration


EXAMPLES

    iduration=serverObj.getprocessingduration(0);
    print('duration: '+itoa(iduration));

NAME

    THttpServer::getpeerip


SYNOPSIS

    TString THttpServer::getpeerip()


DESCRIPTION

    To get the IP address of the client to send the http request


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    speerip = serverObj.getpeerip();
    assert(speerip=='192.168.2.237');

NAME

    THttpServer::sendresponse


SYNOPSIS

    TInteger THttpServer::sendresponse (THttpContent contentid)


DESCRIPTION

    To send the response message


ARGUMENTS

    contentid: The handle of the THTTPContent to be sent


RETURN

    Values less than 0 are returned for failure. Other values are returned 
    for success


EXAMPLES

    var THttpContent cntObj;
    cntObj=serverObj.getcontent();
    serverObj.sendresponse(cntObj);

NAME

    THttpServer::senderror


SYNOPSIS

    TInteger THttpServer::senderror(TString message)


DESCRIPTION

    To send the error message


ARGUMENTS

    message: The content string of the message


RETURN

    Values less than 0 are returned for failure. Other values are returned 
    for success


NAME

    THttpServer::sendstatusresponse


SYNOPSIS

    TInteger THttpServer::sendstatusresponse(TInteger status,THttpContent 
    contentid)


DESCRIPTION

    To send the response message with response status


ARGUMENTS

    status: The status values:
         100: "Continue"
         101: "Switching Protocols"
         200: "OK"
         201: "Created"
         202: "Accepted"
         203: "Non-Authoritative Information"
         204: "No Content"
         205: "Reset Content"
         206: "Partial Content"
         300: "Multiple Choices"
         301: "Moved Permanently"
         302: "Found"
         303: "See Other"
         304: "Not Modified"
         305: "Use Proxy"
         307: "Temporary Redirect"
         400: "Bad Request"
         401: "Unauthorized"
         402: "Payment Required"
         403: "Forbidden"
         404: "Not Found"
         405: "Method Not Allowed"
         406: "Not Acceptable"
         407: "Proxy Authentication Required"
         408: "Request Timeout"
         409: "Conflict"
         410: "Gone"
         411: "Length Required"
         412: "Precondition Failed"
         413: "Request Entity Too Large"
         414: "Request-URI Too Long"
         415: "Unsupported Media Type"
         416: "Requested Range Not Satisfiable"
         417: "Expectation Failed"
         500: "Internal Server Error"
         501: "Not Implemented"
         502: "Bad Gateway"
         503: "Service Unavailable"
         504: "Gateway Timeout"
         505: "Http Version Not Supported"
    

    contentid: The handle of the THttpContent object to be sent


RETURN

    Values less than 0 are returned for failure. Other values are returned 
    for success


EXAMPLES

    ......
    serverObj.sendstatusresponse(401,contObj);

NAME

    THttpClient::THttpClient


SYNOPSIS

    THttpClient::THttpClient(TString logicName)


DESCRIPTION

    To create the THttpClient object


ARGUMENTS

    logicName: The logic name. This name don't need to configured in file 
    config.client


RETURN

    


EXAMPLES

    var THttpClient httpclientobj;
    httpclientobj=new THttpClient('qc');
    
    Âß¼­Ãû'qc'²»ÐèÒªÔÚconfig.clientÖÐÅäÖÃ¡£

NAME

    THttpClient::sendget, THttpClient::sendpost


SYNOPSIS

    TInteger THttpClient::sendget(TString url, int timeout=60)
    TInteger THttpClient::sendpost(TString url, THttpContent contentid, 
    int timeout=60)


DESCRIPTION

    To send request message. sendget() uses method 'GET'. sendpost() uses 
    method 'POST'


ARGUMENTS

    url: The url to request

    timeout: The timeout value that the unit is second. The default value 
    is 60


RETURN

    Values less than 0 are returned for failure. Other values are returned 
    for success


EXAMPLES

    var TString  strURL;
    strURL = 'http://192.168.2.237:51289/httpservertest';
    contentObj.setbuffer('text/xml','<vxml version="1.0"><form id="form3"
    ><block><prompt>
    <audio src="10004.wav"/></prompt></block></form></vxml>');	
    	
    contentObj.setsoapbody(soapObj);
    	
    resultCode=httpclientobj.sendpost(strURL,contentObj);
    
    resultCode=httpclientobj.sendget(strURL);

NAME

    THttpClient::getstatus


SYNOPSIS

    TInteger THttpClient::getstatus()


DESCRIPTION

    To get the status code of the response


ARGUMENTS

    ÎÞ

RETURN

    Values between 200 and 300 are returned for success. Other values are 
    for failure


EXAMPLES

    var TInteger istatus;
    
    istatus = httpclientobj.getstatus();
    print(sprintf('client statue:%d',istatus));

NAME

    THttpClient::getcontent


SYNOPSIS

    THttpContent getcontent()


DESCRIPTION

    To get the THttpContent object from the response message


ARGUMENTS

    ÎÞ

RETURN

    The handle of the THttpContent. -1 is returned for no body}¡£
    begin{fexample

    ......
    contentObj = httpclientobj.getcontent();
    contentObj.writefile('test.log');
    ......

NAME

    THttpContent::getcontenttype


SYNOPSIS

    TString THttpContent::getcontenttype()


DESCRIPTION

    To get the value of 'Content-Type' field from the message header


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    
    contObj.setbuffer('text/plain','<vxml version="1.0"><form id="form1"
    ><block><prompt><audio src="10006.wav"/></prompt></block></form></vxml>
    ');
    var TString strtmp;
    strtmp=contentObj.getcontenttype();
    assert(strtmp=='text/plain');
    

NAME

    THttpContent::gethtmlvalue


SYNOPSIS

    TString THttpContent::gethtmlvalue(TString name)


DESCRIPTION

    If the Content-type is application/x-www-form-urlencoded and the message 
    is from the browser, this function is to get the value of the from controls

    

ARGUMENTS

    name: The name of the controls


RETURN

    


EXAMPLES

    

NAME

    THttpContent::getbuffer, getxmlbody, getsoapbody


SYNOPSIS

    TString THttpContent::getbuffer(TInteger isInlucdeHedaer=0)
    TXMLTree THttpContent::getxmlbody()
    TSoap THttpContent::getsoapbody()


DESCRIPTION

    getbuffer() is to get the whole content and return a string.
    If the Content-Type is Text/xml, getxmlbody() can be used to get the 
    TXMLTree object according to the content.
    If the Content-Type is Text/xml and it is a soap message, getsoapbody(
    ) can be used to get the TSoap object.


ARGUMENTS

    isInlucdeHedaer: 0 means not including the header. Values not equal 
    to 0 means including the header. The default value is 0


RETURN

    getbuffer() returns a string. getxmlbody() returns the handle of TXMLTree 
    object. getsoapbody() returns the handle of TSoap object


EXAMPLES

    contentObj.getbuffer();
    contentObj.getsoapbody();
    

NAME

    THttpContent::setfile, setbuffer, setxmlbody, setsoapbody


SYNOPSIS

    TInteger THttpContent::setfile(TString contentType,TString  fileName)
    
    TInteger THttpContent::setbuffer(TString contentType,TString buffer)
    
    TInteger THttpContent::setxmlbody(TXMLTree xmlhandle)
    TInteger THttpContent::setsoapbody(TSoap soaphandle)


DESCRIPTION

    setfile() is to construct the content using a file
    setbuffer() is to construct the content using a string
    setxmlbody() is to set the content type to text/xml and construct the 
    content using a TXMLTree object
    setsoapbody() is to set the content type to text/xml and construct the 
    content using a TSoap object


ARGUMENTS

    contentType: The Content-Type

    fileName: The file name

    buffer: The content string

    handle: The handle of the TXMLTree or TSoap object


RETURN

    0 is returned for failure. Other values is returned for success.


EXAMPLES

    contentObj.setbuffer('text/xml','<vxml version="1.0"><form id="form3"
    ><block><prompt>
    <audio src="10004.wav"/></prompt></block></form></vxml>');	
    	
    contentObj.setsoapbody(soapObj);
    contentObj.setfile('text/xml','smp');

NAME

    THttpContent::getsubcount, getsubcontent, insertsubbody, removesubbody

    

SYNOPSIS

    TInteger THttpContent::getsubcount()
    THttpContent THttpContent::getsubcontent(TInteger index)
    TInteger THttpContent::insertsubbody(TString conteType, THttpContent 
    handle)
    TInteger THttpContent::removesubbody(TInteger index)


DESCRIPTION

    If the Content-Type is 'multipart/...', these functions can be used.
    
    getsubcount() is to get the count of the sub-content
    getsubcontent() is to get a sub-content and return a THttpContent object
    
    insertsubbody() is to insert a sub-content
    removesubbody() is to remove a sub-content


ARGUMENTS

    index: The index of the sub-content. 0 is the first one

    contentType: the Content-Type to be set

    handle: The handle of THttpContent object to be inserted


RETURN

    getsubcount() returns the count of the sub-content. 0 is returned if 
    the Content-Type is not 'multipart/...'.
    getsubcontent() returns the handle of THttpContent object for a sub-
    content.
    insertsubbody() retruns values less than 0 for failure. Other values 
    are for success.
    removesubbody() retruns values less than 0 for failure or returns the 
    handle of the THttpContent object for sub-content


EXAMPLES

    contObj.getsubcount();
    contObj.getsubcontent(1);
    contSubObj.setbuffer('text/plain','<vxml version="1.0"><form id="form1"
    ><block><prompt><audio src="10006.wav"/></prompt></block></form></vxml>
    ');
    contObj.insertsubbody('multipart/related',contSubObj);
    contObj.removesubbody(1);

NAME

    THttpContent::setmultiparttype


SYNOPSIS

    TInteger THttpContent::setmultiparttype(TInteger type)


DESCRIPTION

    To set the multipart content format


ARGUMENTS

    type: multipart's type, 0:mime; 1:dime


RETURN

    0 is returned for success. Values less than 0 are returned for failure

    

NAME

    THttpContent::getsoapaction, THttpContent::setsoapaction


SYNOPSIS

    TString THttpContent::getsoapaction()
    TInteger THttpContent::setsoapaction(TString value)


DESCRIPTION

    To get or set the SOAPAction field of the message header


ARGUMENTS

    value: The value to be set


RETURN

    setsoapaction() returns -1 for failure and returns 0 for success


NAME

    THttpContent::getcontentdisposition, THttpContent::setcontentdisposition

    

SYNOPSIS

    TString THttpContent::getcontentdisposition()
    TInteger THttpContent::setcontentdisposition(TString content)


DESCRIPTION

    To get of set Content-Disposition field of the message header


ARGUMENTS

    content: The value to be set


RETURN

    setcontentdisposition() returns values less than 0 for failure. Other 
    values are returned for success


EXAMPLES

    contObj.getcontentdisposition();

NAME

    THttpContent::getencodestyle, THttpContent::setencodestyle


SYNOPSIS

    TString THttpContent::getencodestyle()
    TInteger THttpContent::setencodestyle(TString s)


DESCRIPTION

    To get or set the Content-Transfer-Encoding field of the message header

    

ARGUMENTS

    s: The value to be set


RETURN

    setencodestyle() retruns -1 for failure and 0 for success


EXAMPLES

    

NAME

    THttpContent::getheadervalue, THttpContent::setheadervalue


SYNOPSIS

    TString THttpContent::getheadervalue(TString key)
    TInteger THttpContent::setheadervalue(TString key ,TString value)


DESCRIPTION

    getheadervalue() is to get the value of message header
    serheadervalue() is to set the value of message header


ARGUMENTS

    key: The field name of message header. For example: 'Content-Type', 
    'Content-Length'

    value: The value to be set


RETURN

    getheadervalue() returns the value of message header


EXAMPLES

    contSubObj3.setheadervalue('Content-Type','text/xml');
    assert(contSubObj3.getheadervalue('Content-Type')=='text/xml');

NAME

    THttpContent::writefile, THttpContent::readfile


SYNOPSIS

    TInteger THttpContent::writefile(TString filename)
    TInteger THttpContent::readfile(TString filename)


DESCRIPTION

    writefile() is to write the binary file to the path cin/webxml. It dump 
    the THttpContent object to the file.
    readfile() is to read the binary file from the path cin/webxml and construct 
    the THttpContent object according to the file content


ARGUMENTS

    filename: The file name


RETURN

    1 is returned for success. 0 is returned for failure


EXAMPLES

    contObj=new (THttpContent);
    ......
    contSubObj.setbuffer('text/plain','<vxml version="1.0"><form id="form1"
    ><block><prompt><audio src="10006.wav"/></prompt></block></form></vxml>
    ');
    itmp=contObj.insertsubbody('multipart/related',contSubObj);
    ......
    contObj.writefile('test.bin');
    contObj.readfile('test.bin');
    contObj.getcontenttype();
    

NAME

    THttpContent::parsebuf


SYNOPSIS

    TInteger THttpContent::parsebuf(TString content)


DESCRIPTION

    To parse a string and construct the THttpContent object.


ARGUMENTS

    content: The string to be parsed


RETURN

    1 is returned for success and 0 is returned for failure


NAME

    TSCPTimer::settimer


SYNOPSIS

    TInteger TSCPTimer::settimer( TInteger t)


DESCRIPTION

    To set the timeout duration and start the timer.


ARGUMENTS

    t: The time duration to be set. Values equal to or less than 0 are for 
    reset the timer (same as TSCPTimer::clean).


RETURN

    


EXAMPLES

    var TSCPTimer timer;
    timer = new TSCPTimer;
    timer.timeout([timeout]);
    timer.settimer(10);

NAME

    TSCPTimer::timeout


SYNOPSIS

    TInteger TSCPTimer::timeout([eventProcessLabel])


DESCRIPTION

    To set the event-processing label for timeout


ARGUMENTS

    eventProcessLabel: The event processing label


RETURN

    


EXAMPLES

    var TSCPTimer timer;
    timer = new TSCPTimer;
    timer.timeout([timeoutproc]);
    timer.settimer(10);
    ...
    on([timeoutproc], TSCPTimer t)
    {
       // execute this part after 10 seconds
       // ...
    }

NAME

    TSCPTimer::clean


SYNOPSIS

    TInteger TSCPTimer::clean()


DESCRIPTION

    To clean the timer


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TSCPTimer timer;
    timer = new TSCPTimer;
    timer.timeout([timeout]);
    timer.settimer(10);
    ...
    timer.clean();

NAME

    TSCPChargeServer::addchargeclass


SYNOPSIS

    TInteger TSCPChargeServer::addchargeclass(TInteger c)


DESCRIPTION

    To add a charging class to the TSCPChargeServer object. You can call 
    this function many times for adding many charging class. For example 
    a mobile call, you can use several charging class for the local call 
    charging and roaming charging. One TSCPChargeServer object supports a 
    maximum of 10 charging actions at the same time.


ARGUMENTS

    c: The charging class to be added


RETURN

    


EXAMPLES

    var TSCPChargeServer ch1;
    ch1 = new TSCPChargeServer;
    ch1.addchargeclass(100);
    ch1.addchargeclass(101);
    ch1.addchargeclass(102);
    // 3 charging classes are set

NAME

    TSCPChargeServer::settimesupervision, setbalancesupervision


SYNOPSIS

    TInteger TSCPChargeServer::settimesupervision(TInteger t1, TInteger 
    t2, TInteger stopFlag)
    TInteger TSCPChargeServer::setbalancesupervision(TInteger c1, TInteger 
    t2, TInteger stopFlag)


DESCRIPTION

    To set the charging supervision. settimesupervision() is for time duration 
    supervision. setbalancesupervision() is for balance supervision


ARGUMENTS

    t1: The max time duration for supervision

    c1: The max balance for supervision

    t2: The time before limitation. 0 is for no warning before limitation.
     If there is warning before limitation, a event-processing label must 
    be set using onlimitwarning() function

    stopFlag: Whether to stop the charging when limitation is reached. 0 
    is not to stop


RETURN

    


EXAMPLES

    // time supervision example
    void main()
    {
       var TSCPChargeServer ch1;
       ch1 = new TSCPChargeServer;
       ch1.addchargeclass(100);
       ch1.settimesupervision(300,30,1);
       ch1.onlimitwarning([playWarning]);
       // The charging will be stopped after 300 seconds
    
       sleep(1000);
    
       on([playWarning])
       {
          // This part will be executed after 270 seconds
          // ...
       }
    }
    
    // balance supervision example
    void main()
    {
       var TSCPChargeServer ch1;
       ch1= new TSCPChargeServer;
       ch1.addchargeclass(100);
    
       // The balance limitation is 300 cents
       // The charging will not be stopped on limitation
       ch1. setbalancesupervision (300,30,0);
       ch1.onlimitwarning([playWarning]);
       ch1.onlimitreached([playReached]);
    
       sleep(1000);
    
       on([playWarning])
       {
          // ...
       }
       on([playReached])
       {
          // ...
       }
    }

NAME

    TSCPChargeServer::startcharge


SYNOPSIS

    TInteger TSCPChargeServer::startcharge()


DESCRIPTION

    To start the charging after set the parameters


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TSCPChargeServer ch1;
    ch1 = new TSCPChargeServer;
    ch1.addchargeclass(100);
    ch1.onstop([recACR]); // For process the CDR
    ch1.startcharge();

NAME

    TSCPChargeServer::stopcharge


SYNOPSIS

    TInteger TSCPChargeServer::stopcharge()


DESCRIPTION

    To stop the charging


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TSCPChargeServer ch1;
    ch1 = new TSCPChargeServer;
    ch1.addchargeclass(100);
    ch1.setbalancesupervision(300, 0, 0);
    
    ch1.onlimitreached([limitReach]);
    
    ch1.onstop([recACR]);
    ch1.startcharge();
    
    sleep(1000);
    
    ch1.stopcharge();

NAME

    TSCPChargeServer::getcrstartdate8andtime, getcrstopdate8andtime, getcrcallcost,
     getcrcallduration, getcrreason, getcrcallinfo


SYNOPSIS

    TString TSCPChargeServer::getcrstartdate8andtime()
    TString TSCPChargeServer::getcrstopdate8andtime()
    TInteger TSCPChargeServer::getcrcallcost()
    TInteger TSCPChargeServer::getcrcallduration()
    TInteger TSCPChargeServer::getcrreason()
    TString TSCPChargeServer::getcrcallinfo(TString infoname)


DESCRIPTION

    After the charging is stoped, These function can be used to get the 
    information of charging result:
    getcrstartdate8andtime() is to get the start time.
    getcrstopdate8andtime() is to get the stop time.
    getcrcallcost() is to get the call cost.
    getcrcallduration() is to get the call duration.
    getcrreason() is to get the reason of stopping
    getcrcallinfo() is to get information according to the name


ARGUMENTS

    infoname: The name can be 'startdate8andtime', 'stopdate8andtime', '
    cost', 'duration', 'reason'


RETURN

    getcrstartdate8andtime() and getcrstopdate8andtime() return a time string 
    that the format is YYYYMMDDHHmmSS.
    getcrcallcost() returns the integer cost.
    getcrcallduration() returns the integer duration that the unit is second.
    
    getcrreason() returns the integer reason:
       1: chargeLimitReached
       2: recordClosedNotFinal
       3: recordCloseFinal
       4: timeLimitReached
       5: slpStopCharge


EXAMPLES

    var TString crStart = ch1.getcrstartdate8andtime();
    var TString crStop = ch1.getcrstopdate8andtime();
    var TInteger crcost = ch1.getcrcallcost();
    var TInteger crdur = ch1.getcrcallduration();
    var TInteger crrea = ch1.getcrreason();
    crstart = ch1.getcrcallinfo('startdate8andtime');
    crstop = ch1.getcrcallinfo('stopdate8andtime');
    crcost = ch1.getcrcallinfo('cost');
    crdur = ch1.getcrcallinfo('duration');
    crrea = ch1.getcrcallinfo('reason');

NAME

    TSCPChargeServer::onlimitwarning, onlimitreached, onstop


SYNOPSIS

    TInteger TSCPChargeServer::onlimitwarning([eventProcessLabel])
    TInteger TSCPChargeServer::onlimitreached([eventProcessLabel])
    TInteger TSCPChargeServer::onstop([eventProcessLabel])


DESCRIPTION

    To set the event processing label for limitwarning, limitreached and 
    callinformationreport


ARGUMENTS

    eventProcessLabel: The event processing label


RETURN

    


NAME

    TINESObj::init


SYNOPSIS

    TInteger TINESObj::init(TString inesname, TString fsmid='*')


DESCRIPTION

    To initialize the TINESObj


ARGUMENTS

    inesname: An identifier, It can be:
    - The logic name: The peer process is socket server
    - The registered name: The peer process is socket client
    - 'FSM': The peer side is another FSM in this process
    - '*' or '**' for loop back communication using INES method

    fsmid: The peer fsm ID. '*' is for first message of the dialogue. The 
    default value is '*'
    If a new TINESObject is initialized and the application knows the peer 
    fsm ID or the peer CorrelationKey, the inesname argument can not be '
    FSM' and the inesname argument must be:
    For peer fsm ID, the format is xxyyyy that the xx is the 2 bytes scf 
    id and the yyyy is the fsm ID.
    For peer CorrelationID, the format is xxAyyyyy that the xx is the 2 
    bytes scf id and the 'A' is a flag and the yyyyy is a multy bytes CorrelationID.
    


RETURN

    


EXAMPLES

    var TINESObj inesobj;
    inesobj = new TINESObj;
    inesobj.init('INESC'); // This side is server. The registered name is 
    'INESC'
    // ...
    inesobj.init('FSM'); // TINESObj can be re-intialized
    // ...

NAME

    TINESObj::synctoines, TINESObj::synctoines2, TINESObj::sendtoines


SYNOPSIS

    TString TINESObj::synctoines(TString msg, TInteger timer=10)
    TString TINESObj::synctoines2(TString msg, TInteger timer=10)
    TInteger TINESObj::sendtoines(TString msg)


DESCRIPTION

    To send message to the INES and syncronous wait the response. During 
    the waiting, the interruption is disabled. If timeout, an exception is 
    thrown out. 
    Note: The first message of the dialogue must be begin with 'invokeservice 
    ' to create an FSM.
    synctoines2() is very similar to synctoines(). The deference is that 
    the address format of synctoines2() is myinstanceid:objectid
    sendtoines() is to send message without waiting for the response


ARGUMENTS

    msg: The message string to be sent

    timer: The timer. The default value is 10 seconds


RETURN

    synctoines and synctoines2 returns the message received


EXAMPLES

    var TINESObj inesobj;
    var TString response;
    inesobj = new TINESObj;
    inesobj.init('INESC');
    response=inesobj.synctoines('invokeservice 201 1', 5);
    ...
    repines=inesobj.synctoines('serviceevent the second msg');
    ...
    inesobj.sendtoines('serviceevent end session');
    ...

NAME

    TINESObj::synctofsm, TINESObj::sendtofsm


SYNOPSIS

    TInteger TINESObj::sendtofsm(TString msg)
    TString TINESObj::synctofsm(TString msg, TInteger timer)


DESCRIPTION

    synctofsm() is to send message to other FSM and syncronous wait the 
    result. The first message must be begin with 'invokeservice ' to create 
    an FSM
    sendtofsm() is to send message and not wait the response


ARGUMENTS

    msg: The message to be sent

    timer: The timeout. The default value is 10 seconds


RETURN

    synctofsm() is to return the received message.


EXAMPLES

    var TINESObj inesobj;
    var TString response;
    inesobj = new TINESObj;
    inesobj.init('FSM');
    response=inesobj.synctofsm('invokeservice 201 1', 5);
    ...
    repines=inesobj.synctofsm('serviceevent the second msg');
    ...
    inesobj.sendtofsm('serviceevent end session');
    ...

NAME

    TINESObj::clean


SYNOPSIS

    TInteger TINESObj::clean()


DESCRIPTION

    To clear the dialogue information and to initialize a new dialogue


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TINESObj inesobj;
    var TString response;
    inesobj = new TINESObj;
    inesobj.init('FSM');
    response=inesobj.synctofsm('invokeservice 201 1', 5);
    inesobj.clean()
    response=inesobj.synctofsm('invokeservice 202 1', 5);
    ¡­

NAME

    TFTPClient::init


SYNOPSIS

    TInteger TFTPClient::init(TString host, TInteger port, TString user,
     TString passwd)


DESCRIPTION

    To initialize the TFTPClient object.


ARGUMENTS

    host: The host name or IP address

    port: The port

    user: The user name. 'anonymous' is for anonymous

    passwd: The user password. 'a@b.com' is for anonymous


RETURN

    0


EXAMPLES

    var TFTPClient ftp;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');

NAME

    TFTPClient::getfile


SYNOPSIS

    TInteger TFTPClient::getfile(TString rname, TString lname)


DESCRIPTION

    To get a file from the FTP server


ARGUMENTS

    rname: The remote file path

    lname: The local file path


RETURN

    


EXAMPLES

    var  TFTPClient ftp;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');
    ftp.getfile('sourceFile', 'destFile');

NAME

    TFTPClient::putfile


SYNOPSIS

    TInteger TFTPClient::putfile(TString lname, TString rname)


DESCRIPTION

    To put a file to the FTP server


ARGUMENTS

    lname: The local file path

    rname: The rempote file path


RETURN

    


EXAMPLES

    var TFTPClient ftp;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');
    ftp.putfile('sourceFile', 'destFile');

NAME

    TFTPClient::remove


SYNOPSIS

    TInteger TFTPClient::remove (TString filename)


DESCRIPTION

    To delete a file from the FTP server


ARGUMENTS

    filename: The file name to delete


RETURN

    


EXAMPLES

    var TFTPClient ftp;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');
    ftp.remove('noUseFile');

NAME

    TFTPClient::rename


SYNOPSIS

    TInteger TFTPClient::rename(TString mame1, TString name2)


DESCRIPTION

    To rename a file on the FTP server


ARGUMENTS

    name1: The source file name

    name2: The target file name


RETURN

    


EXAMPLES

    var TFTPClient ftp;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');
    ftp.rename('oldname'£¬ 'newname');

NAME

    TFTPClient::getlastinfo


SYNOPSIS

    TString TFTPClient::getlastinfo()


DESCRIPTION

    To get the last information from the server. It is used for check the 
    reason of the failure


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TFTPClient ftp;
    var TString tmpStr;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');
    ftp.rename('oldname'£¬ 'newname');
    tmpStr = ftp.getlastinfo();
    print(tmpStr)

NAME

    TFTPClient::listdir


SYNOPSIS

    TInteger TFTPClient::listdir(TString dirname)


DESCRIPTION

    To list the directory.


ARGUMENTS

    dirname: The remote directory name


RETURN

    


EXAMPLES

    TFTPClient ftp;
    TString fileList;
    ftp = new TFTPClient;
    ftp.init('ahost'£¬21£¬'user'£¬'password');
    ftp.listdir('dirname');
    fileList = ftp.getlastinfo(); // get the file list string
    print(fileList)

NAME

    TTelnetClient::init


SYNOPSIS

    TInteger TTelnetClient::init(TString host, TInteger port, TInteger type)
    


DESCRIPTION

    To initialize the TTelnetClient object


ARGUMENTS

    host: The host name

    port: The port number

    type: 0 is for non-binary mode, 1 is for binary mode


RETURN

    


NAME

    TTelnetClient::receive


SYNOPSIS

    TString TTelnetClient::receive()


DESCRIPTION

    To get information from the telnet server. 


ARGUMENTS

    ÎÞ

RETURN

    The string to received


NAME

    TTelnetClient::send


SYNOPSIS

    TInteger TTelnetClient::send(TString msg)


DESCRIPTION

    To send message to the server. The 0D 0A will be added to the string 
    automatically.


ARGUMENTS

    msg: The string to be sent


RETURN

    


EXAMPLES

    #progma c
    void main()
    {
       var TString tmpStr;
       var TInteger tmpInt;
       var TTelnetClient telnetClient;
    
       telnetClient=new TTelnetClient;
       telnetClient.init('192.168.2.205', 23);
       sleep(1);  // wait for server
       tmpStr=telnetClient.receive();
       print(tmpStr);
       tmpInt=telnetClient.send('wenyx');
       tmpStr=telnetClient.receive();
       print(tmpStr);
       telnetClient.send('*****');
       tmpStr=telnetClient.receive();
       print(tmpStr);
       telnetClient.send('vmstat 1');
       tmpStr=telnetClient.receive();
       print(tmpStr);
       tmpStr=sprintf('\03');   // send ctrl-C, can interrupt the vmstat 
    command
       telnetClient.send(tmpStr);
       sleep(3);
       tmpStr=telnetClient.receive();
       print(tmpStr);
    }

NAME

    encodeoid, decodeoid


SYNOPSIS

     TString  decodeoid(TString s)
    TString  encodeoid(TString s)


DESCRIPTION

    To encode/decode the OBJECT IDENTIFIER of ASN.1


ARGUMENTS

    s: The source string


RETURN

    The result string


EXAMPLES

    assert(encodeoid('1.3.12.2.1107.3.3.0.0.4') == 'B2C02088353030000040'
    );
    assert(decodeoid('B2C02088353030000040') == '1.3.12.2.1107.3.3.0.0.4'
    );

NAME

    asnvalue, asnrawvalue


SYNOPSIS

    TString asnvalue( tagpath, TString defaultValue)
    TInteger asnvalue( tagpath, TInteger defaulValue)
    TString asnrawvalue ( tagpath )


DESCRIPTION

    To get value from an ASN.1 tree according to a path.


ARGUMENTS

    tagpath: The tag path of ASN.1 tree

    defaultValue: asnvalue() returns this default value if the tag path 
    is not valid


RETURN

    asnvalue() returns the decoded value or the default value. asnrawvalue 
    returns the raw hex string or 'NULL'


EXAMPLES

    i = asnvalue(<<inap.invoke.promptandcollectuserinformation.collectedinfo.
    
         collecteddigits.interruptableannind>>,-2)
    s = asnrawvalue(<<inap.invoke.promptandcollectuserinformation.collectedinfo.
    
          collecteddigits.interruptableannind>>)

NAME

    set asn handle


SYNOPSIS

    ASNHandle = TagPath


DESCRIPTION

    This is a special assignment statement. It can simplify the long tag 
    path.


ARGUMENTS

    ASNHandle: a asn handle var defined before

    TagPath: a tag path


RETURN

    


EXAMPLES

    var <<inap.invoke.PromptAndCollectUserInformation.informationToSend>
    > itsHandle;
    itsHandle = <<inap.invoke.PlayAnnouncement.informationToSend>>
    i = asnvalue(<<$itsHandle.inbandinfo.numberOfRepetitions>>)

NAME

    TASNObject::TASNObject


SYNOPSIS

    TASNObject::TASNObject(TInteger opID, TString para)


DESCRIPTION

    To create a TASNObject object according to the operation ID and the 
    encoded argument string. The result object is like as the object got 
    by TTCAPDialogue::getasnobj()


ARGUMENTS

    opID: operation ID integer

    para: an ASC string encoded with ASN.1. For example, string '0330081010'
     indicates the 5 bytes ASN.1 code: 30 03 80 01 01


RETURN

    the handle of the constructed TASNObject object


EXAMPLES

    var TASNObject a;
    var TString s;
    a = new TASNObject(48,'08500212345670');
    s = a.asnvalue(<<inap.result.receivedinformation.digitsresponse>>,'NULL'
    );
    assert(s == '1234567');

NAME

    TASNObject::getcode


SYNOPSIS

    TString TASNObject::getcode()


DESCRIPTION

    To get an encoded ASC string of this object


ARGUMENTS

    ÎÞ

RETURN

    For example '0330081010' is returned for 5 bytes ASN.1 code: 30 03 80 
    01 01


EXAMPLES

    var TASNObject a;
    var TString s;
    a = new TASNObject(48,'08500212345670');
    s = a.getcode();
    assert(s == '08500212345670');

NAME

    TASNObject::asnvalue, TASNObject::asnrawvalue


SYNOPSIS

    TString TASNObject::asnvalue( tagpath, TString default)
    TInteger TASNObject::asnvalue( tagpath, TInteger default)
    TString TASNObject::asnrawvalue ( tagpath )


DESCRIPTION

    To get value from an TASNObject object according to a path.


ARGUMENTS

    tagpath: The tag path

    defaultValue: asnvalue() returns this default value if the tag path 
    is not valid


RETURN

    asnvalue() returns the decoded value or the default value. asnrawvalue 
    returns the raw hex string or 'NULL'


EXAMPLES

    // For example, this logic is invoked by INAP IDP...
    void main(TTCAPDialogue t)
    {
       var TASNObject a;
       var TString s;
       var TInteger i;
       a = t.getasnobj();
       s = a.asnvalue(<<inap.invoke.initialdp.calledPartyNumber>>,'NULL'
    );
       i = a.asnvalue(<<inap.invoke.initialdp.serviceKey>>,-1);
       s = a.asnrawvalue(<<inap.invoke.initialdp.serviceKey>>);
       ...
    }

NAME

    TASNObject::addvalue, TASNObject::addobject


SYNOPSIS

    TInteger TASNObject::addvalue(TString value, TInteger type, TInteger 
    tag)
    TInteger TASNObject::addobject(TASNObject objectid, TInteger tag)


DESCRIPTION

    To construct an ASN.1 code. You can not get value from the constructed 
    object with tag path. addvalue() is to add a value. add object is to 
    add an object.


ARGUMENTS

    value: The value to be added

    type: The value type to be added:
    5: only encode tag and length 0. value can be a null string that is 
    not used
    2: convert the value to an integer and encode
    4: encode value as a string without any converting
    254: encode after converting value to BCD code (append 'F' for odd length)
    
    255: encode after converting value to BCD code (append '0' for odd length)
    

    tag: The ASN.1 encoded tag

    objectid: object to add


RETURN

    returns 0 for success and other values for failure


EXAMPLES

    var TASNObject a,b,c;
    
    a = new TASNObject;
    a.addvalue('1234',4,0x80);  // a: 80 04 31 32 33 34
    a.addvalue('1234',4,0x81);  // a: 80 04 31 32 33 34 81 04 31 32 33 34
    b = new TASNObject;
    b.addobject(a,0xA0); // b: A0 0C 80 04 31 32 33 34 81 04 31 32 33 34
    b.addobject(a,0xA1);
    // b:
    // A0 0C 80 04 31 32 33 34 81 04 31 32 33 34 A1 0C 80 04 31 32 33 34
       81 04 31 32 33 34
    c = new TASNObject;
    c.addobject(b,0x30);
    // c:
    // 30 1C A0 0C 80 04 31 32 33 34 81 04 31 32 33 34 A1 0C 80 04 31 32
       33 34 81 04 31 32 33 34
    assert(c.getcode() == '03C10AC00840132333431840132333431AC0084013233343184013233343'
    );

NAME

    TSoap::init


SYNOPSIS

    TInteger TSoap::init(TString xmlns,int isIncludeHeader,TString pi=''
    )


DESCRIPTION

    To initialize the soap message as a simple xml object which may include 
    tags such as 'Envelope', 'Header' and 'Body'. The soap name space env 
    is set. The schema name space can be set according to the argument or 
    be set to the default value


ARGUMENTS

    xmlns: URL of the schema name space

    isIncludeHeader: Whether the xml including 'Header' tag. 1 for including,
     0 for not including

    pi: The process instruction of the xml. The default value is '' that 
    mains '<?xml version="1.0" encoding="UTF-8"?>'


RETURN

    Values less than 0 are for failure and other values is for success


EXAMPLES

    var TSoap s = new TSoap;
    s.init('', 0);
    assert(s.tostr()=='<?xml version="1.0" encoding="UTF-8"?><env:Envelope 
    xmlns:env=
    "http://schemas.xmlsoap.org/soap/envelope/"><env:Body></env:Body></env:
    Envelope>');

NAME

    TSoap::tostr


SYNOPSIS

    TString TSoap::tostr()


DESCRIPTION

    To convert this TSoap object to a string. The string will include the 
    xml process instruction and this is different from TXMLTree::tostr().
    


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TSoap soapObj;
    soapObj = new TSoap;
    soapObj.init('', 1);
    var TString ssoap;
    ssoap = soapObj.tostr();

NAME

    TSoap::getdetail, TSoap::addfault


SYNOPSIS

    TString TSoap::getdetail()
    TInteger TSoap::addfault(TString faultcode, TString faultstring, TString 
    detail)


DESCRIPTION

    If it is failed for soap message processing, addfault() will be called 
    to construct fault message to send.
    If the detail argument is needed when calling addfault() function, the 
    detail content can be got by calling getdetail() function.


ARGUMENTS

    faultcode: The values are defined in the soap protocol

    faultstring: The values are defined in the soap protocol

    detail: The value is got using getdetail(). Null string for not using 
    this argument


RETURN

    addfault() returns value less than 0 for failure and returns other values 
    for success


NAME

    TSoap::setcurrentpath


SYNOPSIS

    TInteger TSoap::setcurrentpath(TString path)


DESCRIPTION

    To set the current path. If the current path is set, the path argument 
    of other functions are all reletive path


ARGUMENTS

    path: A path from tag 'Envelope'


RETURN

    Values less than 0 is returned for failure and other values is for success

    

EXAMPLES

    var TSoap s = new TSoap;
    s.init('',0);
    s.addchild('a', '123', 'Body');
    assert(s.tostr()=='<?xml version="1.0" encoding="UTF-8"?><env:Envelope 
    xmlns:env=
    "http://schemas.xmlsoap.org/soap/envelope/"><env:Body><a>123</a></env:
    Body></env:
    Envelope>');
    s.setcurrentpath('Envelope/Body');
    assert(s.getvalue('a') == '123');
    s.setcurrentpath('Envelope');
    assert(s.getvalue('Body/a') == '123');

NAME

    TSoap::getsubcount, TSoap::getsubname


SYNOPSIS

    TInteger TSoap::getsubcount(TString path)
    TString TSoap::getsubname(TInteger index, TString path)


DESCRIPTION

    getsubcount() is to get the children count for an element
    getsubname() is to get a child tag name for an element


ARGUMENTS

    path: The path of the element. It is a relative path to the current 
    path set by setcurrentpath()

    index: The child index. The index of the first child is 0


RETURN

    getsubcount() returns the children count or returns negative integer 
    for failure.
    getsubname() returns the child tag name string.


EXAMPLES

    ssubname = soapObj.getsubname(0,'third');
    assert(ssubname == 'third1');
    print('a third subname:'+ssubname);
    ssubname = soapObj.getsubname(1,'third');
    assert(ssubname == 'third2');
    print('a third subname2:'+ssubname);
    
    isubcount = soapObj.getsubcount('third');
    assert(isubcount == 3);

NAME

    TSoap::getvalue, TSoap::getattrvalue


SYNOPSIS

    TString TSoap::getvalue(TString path)
    TString TSoap::getattrvalue(TString attrName, TString path)


DESCRIPTION

    getvalue() is to get the content value of an element
    getattrvalue() is to get the attribute value of an element


ARGUMENTS

    path: The path of the element. It is a relative path to the current 
    path set by setcurrentpath()


RETURN

    


EXAMPLES

    ssoapattrvalue = soapObj.getattrvalue('attr1 ','');
    assert(ssoapattrvalue == 'get');
    
    ssoapvalue = soapObj.getvalue('first');
    assert(ssoapvalue == '123');

NAME

    TSoap::getxmlns, getattrxmlns, getxmlnsvalue


SYNOPSIS

    TString TSoap::getxmlns(TString path)
    TString TSoap::getattrxmlns(TString attrName, TString path)
    TString TSoap::getxmlnsvalue(TString prefix)


DESCRIPTION

    getxmlns() is to get the tag prefix for name space of an element
    getattrxmlns() is to get the attribute name prefix for name space of 
    an element
    getxmlnsvalue() is to get the url value of a name space


ARGUMENTS

    path: The path of the element. It is a relative path to the current 
    path set by setcurrentpath()

    attrName: attribute name not including name space

    prefix: The name space prefix


RETURN

    


EXAMPLES

    var TSoap s = new TSoap;
    s.init('',0);
    s.addattr('env:a', '123', 'Body');
    assert(s.tostr()=='<?xml version="1.0" encoding="UTF-8"?><env:Envelope 
    xmlns:env=
    "http://schemas.xmlsoap.org/soap/envelope/"><env:Body env:a="123"></
    env:Body></en
    v:Envelope>', s.tostr());
    assert(s.getxmlns('Body')=='env', s.getxmlns('Envelope'));
    assert(s.getattrxmlns('a', 'Body')=='env', s.getattrxmlns('a', 'Body'
    ));
    assert(s.getxmlnsvalue('env')=='http://schemas.xmlsoap.org/soap/envelope/
    ');

NAME

    TSoap::addchild, TSoap::addattr


SYNOPSIS

    TInteger TSoap::addchild(TString name,TString value, TString path)
    TInteger TSoap::addattr(TString attrName,TString value, TString path)
    


DESCRIPTION

    addchild() is to add a child for an element
    addattr() is to add an attribute for an element


ARGUMENTS

    name: The name of child tag or attribute name including name space prefix

    
    value: The value of child content of attribute to be set

    path: The path of the element. It is a relative path to the current 
    path set by setcurrentpath()


RETURN

    Integer less than 0 is returned for failure. Other values for success

    

EXAMPLES

    soapObj.addchild('third2','two','Body/third');
    soapObj.addchild('third2','three','Body/third');
    soapObj.addattr('env:attr1','get','Body');

NAME

    TSipMsg::printtree


SYNOPSIS

    TInteger TSipMsg::printtree()


DESCRIPTION

    To display the sip message using xml format


ARGUMENTS

    ÎÞ

RETURN

    0 for success, -1 for failure


NAME

    TSipMsg::send


SYNOPSIS

    TInteger TSipMsg::send(TString protocol='[response]')


DESCRIPTION

    To send a SIP message


ARGUMENTS

    protocol: This argument is needed only for request message.


RETURN

    0 for success, £­1 for failure


NAME

    TSipMsg::getres


SYNOPSIS

    TSipMsg TSipMsg::getres(TInteger resCode)


DESCRIPTION

    To construct a response message according to the request message. Normally,
     after received a request, the service logic need construct a resonse 
    to send using this request message. 
    Note: For UA(MS, sipphone), The Contract parameter of the 180 or 200 
    response message must be reset after calling this function


ARGUMENTS

    resCode: The response code


RETURN

    The constructed response message


EXAMPLES

    void main(TSipMsg req)
    {
       var TSipMsg res;
       res = req.getres(100);
       ...
    }

NAME

    TSipMsg::createcallleg


SYNOPSIS

    TSipCallLeg TSip::createcallleg()


DESCRIPTION

    After received a SIP message, calling this function can create a TSipCallLeg 
    object to process the other messages about the calling party


ARGUMENTS

    ÎÞ

RETURN

    the handle of TSipCallLeg object


EXAMPLES

    void main(TSipMsg req)
    {
       var TSipCallLeg oleg;
       oleg = req.createcallleg(req);
       ...
    }

NAME

    TSipMsg::createcallsegment


SYNOPSIS

    TSipCallSegment TSipMsg::createcallsegment()


DESCRIPTION

    After the service logic received the sip message, calling this function 
    can construct a TSipCallSegment object to process the request.


ARGUMENTS

    ÎÞ

RETURN

    the handle of the TSipCallSegment object


EXAMPLES

    void main(TSipMsg req)
    {
       var TSipCallSegment cs;
       cs = req.createcallsegment();
       ...
    }

NAME

    TSipMsg::getlocalport


SYNOPSIS

    TString TSipMsg::getlocalport()


DESCRIPTION

    To get the port number of the local SIP server for the request message

    

ARGUMENTS

    ÎÞ

RETURN

    decimal string of the port


NAME

    TSipMsg::getmethod


SYNOPSIS

    TString TSipMsg::getmethod()


DESCRIPTION

    To get the method of the sip message. For example: 'INVITE', 'BYE'..
    .


ARGUMENTS

    ÎÞ

RETURN

    method name


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getmethod() == 'INVITE');
    }

NAME

    TSipMsg::getcontent, TSipMsg::setcontent


SYNOPSIS

    TString TSipMsg::getcontent()
    TInteger TSipMsg::setcontent(TString content)


DESCRIPTION

    To get or set the content of the sip messsage


ARGUMENTS

    content: the message content to be set


RETURN

    setcontent() returns 0 for success and -1 for failure. getcontent() 
    the content string


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    ...
    P-Asserted-Identity: <sip:07312910430@10.20.201.5>
    Supported: 100rel,timer,diversion
    
    v=0
    o=- 1 1 IN IP4 10.20.200.227
    s=-
    c=IN IP4 10.20.201.168
    t=0 0
    m=audio 30000 RTP/AVP 8
    a=rtpmap:8 PCMA/8000
    a=ptime:20
    */
    void main(TSipMsg req)
    {
       assert(req.getcontent() == 'v=0
    o=- 1 1 IN IP4 10.20.200.227
    s=-
    c=IN IP4 10.20.201.168
    t=0 0
    m=audio 30000 RTP/AVP 8
    a=rtpmap:8 PCMA/8000
    a=ptime:20
    ');
    }

NAME

    TSipMsg::getheader, TSipMsg::setheader


SYNOPSIS

    TString TSipMsg::getheader(TString path)
    TInteger TSipMsg::setheader(TString path, TString value)


DESCRIPTION

    To get or set the content of a parameter of the message head


ARGUMENTS

    path: header path

    value: the header value to be set


RETURN

    getheader() returns the content string. setheader returns 0 for success 
    and -1 for failure


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    To: <sip:7434@10.20.200.227:5060>
    CSeq: 1 INVITE
    Via: SIP/2.0/UDP 10.20.200.227:9060;branch=z9hG4bK13884222
    Max-Forwards: 30
    Contact: <sip:10.20.200.227:9060>
    Content-Type: application/sdp
    Content-Length: 130
    Route: <sip:10.20.200.227:5090;call=orig;lr>
    P-Asserted-Identity: <sip:07312910430@10.20.201.5>
    Supported: 100rel,timer,diversion
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getheader('Supported') == '100rel,timer,diversion');
       assert(req.getheader('From/tag') == '00143-0b1006b1010684d6');
       req.setheader('Contact','<sip:192.168.2.235:14550>');
       assert(req.getheader('Contact') == '<sip:192.168.2.235:14550>');
    }

NAME

    TSipMsg::getrequesturl, TSipMsg::geturladdr, TSipMsg::geturlnum


SYNOPSIS

    TString TSipMsg::getrequesturl()
    TString TSipMsg::geturladdr()
    TString TSipMsg::geturlnum()


DESCRIPTION

    getrequesturl() is to get the URL of the request message. geturladdr(
    ) only get the address part (before ";") of the URL. geturlnumber() only 
    get the user name part (between "sip:" and "@") of the address


ARGUMENTS

    ÎÞ

RETURN

    a string


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060;play=222.wav;user=phone SIP/2.0
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getrquesturl() == 'sip:7434@10.20.200.227:5060;play=222.
    wav;user=phone');
       assert(req.geturladdr() == 'sip:7434@10.20.200.227:5060');
       assert(req.geturlnum() == '7434');
    }

NAME

    TSipMsg::getviabranch


SYNOPSIS

    TString TSipMsg::getviabranch()


DESCRIPTION

    To get the "branch" field value of the "Via" parameter of the message 
    head


ARGUMENTS

    ÎÞ

RETURN

    "branch" field value


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    To: <sip:7434@10.20.200.227:5060>
    CSeq: 1 INVITE
    Via: SIP/2.0/UDP 10.20.200.227:9060;branch=z9hG4bK13884222
    Max-Forwards: 30
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getviabranch() == 'z9hG4bK13884222');
    }

NAME

    TSipMsg::getfromtag, TSipMsg::setfromtag, TSipMsg::gettotag, TSipMsg:
    :settotag


SYNOPSIS

    TString TSipMsg::getfromtag()
    TInteger TSipMsg::setfromtag(TString tagValue)
    TString TSipMsg::gettotag()
    TInteger TSipMsg::settotag(TString tagValue)


DESCRIPTION

    To get/set the tag value of "From" or "To" parameter of the message 
    head. Tag value is the part after "tag=" in the "From" or "To" paramarer 
    line


ARGUMENTS

    tagValue: the tag value to be set


RETURN

    For getfromtag() and gettotag(), tag value will be returned. For setfromtag(
    ) and settotag(), 0 is returned for success and -1 returned for failure

    

EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    To: <sip:7434@10.20.200.227:5060>;tag=972x833x
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getfromtag() == '00143-0b1006b1010684d6');
       assert(req.gettotag() == '972x833x');
    }

NAME

    TSipMsg::getfromnum, TSipMsg::gettonum


SYNOPSIS

    TString TSipMsg::getfromnum()
    TString TSipMsg::gettonum()


DESCRIPTION

    To get the user name part of the address information from the "From"
     or "To" parameter of the message head. The part is between "sip:" and 
    "@"


ARGUMENTS

    ÎÞ

RETURN

    The got user name


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    To: <sip:7434@10.20.200.227:5060>
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getfromnum() == '07312910430');
       assert(req.gettonum() == '7434');
    }

NAME

    TSipMsg::getcseqnum, TSipMsg::getcseqmethod


SYNOPSIS

    TString TSipMsg::getcseqnum()
    TString TSipMsg::getcseqmethod()


DESCRIPTION

    To get the number and method from the "CSeq" parameter of the message 
    head


ARGUMENTS

    ÎÞ

RETURN

    number of method name of "CSeq"


EXAMPLES

    /* For example:
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    To: <sip:7434@10.20.200.227:5060>
    CSeq: 1 INVITE
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getcseqnum() == '1');
       assert(req.getcseqmethod() == 'INVITE');
    }

NAME

    TSipMsg::getfromaddr, TSipMsg::gettoaddr, TSipMsg::getcontactaddr


SYNOPSIS

    TString TSipMsg::getfromaddr()
    TString TSipMsg::gettoaddr()
    TString TSipMsg::getcontactaddr()


DESCRIPTION

    To get the address information from the "From", "To" or "Contact" parameter 
    of the sip message head


ARGUMENTS

    ÎÞ

RETURN

    The address information in "To" parameter


EXAMPLES

    /* For example INVITE message
    INVITE sip:7434@10.20.200.227:5060 SIP/2.0
    Call-ID: 7764053628133e4b65b609e7160e555e@10.20.200.227
    From: <sip:07312910430@10.20.200.227:5060>;tag=00143-0b1006b1010684d6
    To: <sip:7434@10.20.200.227:5060>
    CSeq: 1 INVITE
    Via: SIP/2.0/UDP 10.20.200.227:9060;branch=z9hG4bK13884222
    Max-Forwards: 30
    Contact: <sip:10.20.200.227:9060>
    ...
    */
    void main(TSipMsg req)
    {
       assert(req.getfromaddr() == 'sip:07312910430@10.20.200.227:5060')
    ;
       assert(req.gettoaddr() == 'sip:7434@10.20.200.227:5060');
       assert(req.getcontactaddr() == 'sip:10.20.200.227:9060');
    }

NAME

    TSipCallSegment::getid, TSipCallSegment::setid


SYNOPSIS

    TString TSipCallSegment::getid()
    TInteger TSipCallSegment::setid(TString csID)


DESCRIPTION

    To get or set the ID of a TSipCallSegment object


ARGUMENTS

    csID: the Id to be set


RETURN

    serid() returns 1 for success and 0 for failure. getid() returns the 
    ID string


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    var TString idValue;
    ...
    cs = req.createcallsegment();
    cs.setid(idValue);
    idValue = cs.getid();

NAME

    TSipCallSegment::state


SYNOPSIS

    TInteger TSipCallSegment::state( )


DESCRIPTION

    To get the status code of a CS


ARGUMENTS

    ÎÞ

RETURN

    code integer


NAME

    TSipCallSegment::getlegnum


SYNOPSIS

    TInteger TSipCallSegment::getlegnum()


DESCRIPTION

    To get the leg number of a CS


ARGUMENTS

    ÎÞ

RETURN

    leg number integer


NAME

    TSipCallSegment::initial


SYNOPSIS

    TInteger TSipCallSegment::initial(TSipCallSegment cs2)


DESCRIPTION

    To initialize this CS using another CS


ARGUMENTS

    cs2: another CS


RETURN

    


NAME

    TSipCallSegment::relate


SYNOPSIS

    TInteger TSipCallSegment::relate(TSipCallSegment cs2)


DESCRIPTION

    To make a relation for two TSipCallSegment objects


ARGUMENTS

    cs2: another CS


RETURN

    


NAME

    TSipCallSegment::merge


SYNOPSIS

    TInteger TSipCallSegment::merge(TSipCallSegment cs2)


DESCRIPTION

    To merge two TSipCallSegment objects


ARGUMENTS

    cs2: another CS


RETURN

    


NAME

    TSipCallSegment::onfail, onbusy, onnoanswer, ondisconnect, onanswer,
     onringing, ontransfer, onreplaces, onpassivehold


SYNOPSIS

    TInteger TSipCallSegment::onfail([eventProcessLabel])
    TInteger TSipCallSegment::onbusy([eventProcessLabel])
    TInteger TSipCallSegment::onnoanswer([eventProcessLabel], TInteger time=
    30 )
    TInteger TSipCallSegment::ondisconnect([eventProcessLabel])
    TInteger TSipCallSegment::onanswer([eventProcessLabel])
    TInteger TSipCallSegment::onringing([eventProcessLabel])
    TInteger TSipCallSegment::ontransfer([eventProcessLabel])
    TInteger TSipCallSegment::onreplaces([eventProcessLabel])
    TInteger TSipCallSegment::onpassivehold([eventProcessLabel])


DESCRIPTION

    onfail: set the event processing entry for routing failure
    onbusy: set the event processing entry for called party busy
    onnoanswer: set the event processing entry for called party no answer
    
    ondisconnect: set the event processing entry for disconnecting (calling 
    or called party disconnecting after answering)
    onanswer: set the event processing entry for called party answering 
    (including caused by ica)
    onringing: set the event processing entry for called party ringing (
    include caused by ica)
    ontransfer: set the event processing entry for call transfering
    onreplace: set the event processing entry for called party replacing
    
    onpassivehold: set the event processing entry for ternimal holding


ARGUMENTS

    eventProcessLabel: the entry name for processing the event

    time: no answering time. default is 30 seconds


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.onfail([routingfailed]);
    cs.onfail([calledbusy]);
    
    on([routingfailed], TSipCallSegment cs)
    {
       ...
    }
    on([calledbusy], TSipCallSegment cs)
    {
       ...
    }

NAME

    TSipCallSegment::connect


SYNOPSIS

    TInteger TSipCallSegment::connect(TString calledNumber, TInteger legID,
     TString callingNumber)


DESCRIPTION

    To connect to the called party


ARGUMENTS

    calledNumber: called party number

    legID: leg ID of called party (must be 2)

    callingNumber: calling party number


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.connect ('9999',1,' ');

NAME

    TSipCallSegment::connectwithcs, TSipCallSegment::connectwitharg


SYNOPSIS

    TInteger TSipCallSegment::connectwithcs(TSipCallSegment cs2, TString 
    urlNumber,TString fromNumber, TString toNumber)
    TInteger TSipCallSegment::connectwitharg(TSipCallSegment cs2, TInteger 
    type, TString urlNumber,TString fromNumber, TString toNumber, TString 
    other='')


DESCRIPTION

    To connect to the called party CS. It can be with argument or without 
    argument


ARGUMENTS

    cs2: called party TSipCallSegment object

    urlNumber: 

    fromNumber: 

    toNumber: 

    type: connect type

    other: other argument, default is null string


RETURN

    


NAME

    TSipCallSegment::ica, TSipCallSegment::icawitharg


SYNOPSIS

    TInteger TSipCallSegment::ica(TString called, TString calling)
    TInteger TSipCallSegment::icawitharg(TString connectType, TString urlCalled,
     TString calling, TString toCalled, TString other='')


DESCRIPTION

    ÊÔºô


ARGUMENTS

    called: called party number

    calling: calling party number to display

    connectType: connecting type, 1 for connecting to the media
    2,3  the destinationAddr is an userNumber or url,state=initialorderms,
     order audio 2 and video 3
    4 the destinationAddr is an userNumber or url,state=initialorderms,mode=
    audio,ms not do reinvite
    5 the destinationAddr is an userNumber or url,state=initialorderms, 
    mode=video,ms not do reinvite
    6 the destinationAddr is an userNumber or url,state=initial,invite with 
    nosdp

    urlCalled: called party number in the url

    toCalled: called party number in the "To" parameter, default is same 
    with the number in url

    other: other argument, default is null string


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.ica('6666','7777');

NAME

    TSipCallSegment::releasecall


SYNOPSIS

    TInteger TSipCallSegment::releasecall()


DESCRIPTION

    To release a CS


ARGUMENTS

    ÎÞ

RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.releasecall()£»

NAME

    TSipCallSegment::etc, ctr


SYNOPSIS

    TInteger TSipCallSegment::etc()
    TInteger TSipCallSegment::ctr(TInteger resCode=183)


DESCRIPTION

    To connect to the midia server. ctr has not answering action and without 
    charging


ARGUMENTS

    resCode: 


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.etc();

NAME

    TSipCallSegment::onpa, onpc, onpr


SYNOPSIS

    TInteger TSipCallSegment::onpa([eventProcessLabel])
    TInteger TSipCallSegment::onpc([eventProcessLabel])
    TInteger TSipCallSegment::onpr([eventProcessLabel])


DESCRIPTION

    onpa: set the event processing entry for finished the asynchronous pa
    
    onpc: set the event processing entry for finished the asynchronous pc
    
    onpr: set the event processing entry for finished the asynchronous pr

    

ARGUMENTS

    eventProcessLabel: the entry name for processing event


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.onpa ([padone]);
    cs.asynpa('0','10001',0,' ',1,0);
    on([padone], TSipCallSegment cs)
    {
       ...
    }

NAME

    TSipCallSegment::pa, asynpa, pc, asynpc, pr, asynpr, syncpc, syncpa

    

SYNOPSIS

    TInteger TSipCallSegment::pa(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat ,TInteger interval, TInteger timer=
    60)
    
    TInteger TSipCallSegment::asynpa(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat ,TInteger interval)
    
    TString TSipCallSegment::pc(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TInteger interrupted,
     TInteger min, TInteger max,TString endDigit, TString cancelDigit, TInteger 
    firstTimeout, TInteger interTimeOut, TInteger timer=60)
    
    TInteger TSipCallSegment::asynpc(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TInteger interrupted,
     TInteger min, TInteger max,TString endDigit, TString cancelDigit, TInteger 
    firstTimeout, TInteger interTimeOut)
    
    TInteger TSipCallSegment::pr(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TString endDigit,
     TInteger duration, TString fileName, TString fileFormat, TInteger dupTreat,
     TInteger timer=60 )
    
    TInteger TSipCallSegment::asynpr(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TString endDigit,
     TInteger duration, TString fileName, TString fileFormat, TInteger dupTreat)
    
    
    TString TSipCallSegment::syncpc(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TInteger interrupted,
     TInteger min, TInteger max,TString endDigit, TString cancelDigit, TInteger 
    firstTimeout, TInteger interTimeOut, TInteger timer=60)
    
    TInteger TSipCallSegment::syncpa(TString msgRadix, TString msgid, TInteger 
    playType, TString var, TInteger repeat, TInteger interval, TInteger ini,
     TInteger timer=60)


DESCRIPTION

    pa() is for synchronous playing announcement, and asyncpa() for asynchronous
    
    pc() is for synchronous playing announcement collecting user information,
     and asyncpc() for asynchronous
    pr() is for synchronous playing announcement recording, and asyncpr(
    ) for asynchronous


ARGUMENTS

    msgIDBase: message id base number

    msgID: message id. It can be a number string or a filename. It will 
    be null if the mode is TTS

    type: message type:
    0: fix announcement
    1: integer
    2: number
    3: time. The format is HHMM
    4: date. The format is YYYYMMDD
    5: price. The format is an integer that the unit is the smmallest unit 
    of the currency
    6: time duration, The format is an integer that the unit is second
    7: text for TTS
    8: number for DTMF playing
    9: number for FSK playing
    10: fax sending

    varPart: content of the variable part:
    - For TTS, the text content
    - For fix announcement of fax, null string
    - Fot other, default is for chinese. If using other language, the format 
    is "lang-value-subtype". For example: "eng-12833-gen", "chi-1234-ord"
    

    repeat: repetation number

    interval: interval between the repetation

    timer: time out, default is 60 seconds

    min: min digits length

    max: max digits length

    endDigit: end digits for collecting or recording

    cancelDigit: cancel digits

    firstTimeout: time out for first digit

    interTimeout: time out for inter digits

    duration: max duration for recording

    fileName: file name for recording

    fileFormat: file format for recording. It can be:
    - audio/wav
    - audio/x-wav
    - audio/vnd.wave;codec=x, x=1:PCM, 6:G711a, 7:G711u, 83:G729, 8C:Convedia 
    G729c
    - video/quicktime;Codecs="h263,ulaw"

    dupTreat: duplicate file name treatment for recording (0: replace; 1:
     append)


RETURN

    for pa, 200 for success, other for failure
    for pc, return the collected digits
    for pr, 1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.pa('0','10001',0,' ',1,0);
    ...
    cs.pc('0','10001',0, ' ', 1, 0, 1, 1, 18,'#', '0', 20, 20);
    ...
    cs.pr('0','100001','0',' ',1,0,'#',60,'record1',' audio/wav',0,10);
    ...

NAME

    TSipCallSegment::getparescode, getpcrescode, getpcdtmf, getprrescode

    

SYNOPSIS

    TInteger TSipCallSegment::getparescode()
    TInteger TSipCallSegment::getpcrescode()
    TString TSipCallSegment::getpcdtmf()
    TInteger TSipCallSegment::getprrescode()


DESCRIPTION

    These function can be called to get the response code or the collected 
    digits content in the event processing logic that is set by onpa(), onpc(
    ) or onpr()


ARGUMENTS

    ÎÞ

RETURN

    Response code or collected digits


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.onpa ([padone]);
    cs.asynpa('0','10001',0,' ',1,0);
    on([padone], TSipCallSegment cs1)
    {
       var TInteger code = cs1.getparescode();
    }

NAME

    TSipCallSegment::cancel


SYNOPSIS

    TInteger TSipCallSegment::cancel(TInteger)


DESCRIPTION

    To cancel the current pa(), pc(), or pr()


ARGUMENTS

    legID: leg id to cancel. 0 for cancel the pa() for conference


RETURN

    1³É¹¦£¬0Ê§°Ü


NAME

    TSipCallSegment::dfc


SYNOPSIS

    TInteger TSipCallSegment::dfc()


DESCRIPTION

    To disconnect the connection to media. It is used for swtching from 
    one MS to another MS


ARGUMENTS

    ÎÞ

RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.dfc();

NAME

    TSipCallSegment::disconnectleg


SYNOPSIS

    TInteger TSipCallSegment::disconnectleg(TInteger legID)


DESCRIPTION

    To disconnect the call leg from the CS


ARGUMENTS

    legID: leg id of called party. It must be 2


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.disconnectleg (2);

NAME

    TSipCallSegment::splitleg


SYNOPSIS

    TInteger TSipCallSegment::splitleg(TInteger legID)


DESCRIPTION

    To split two legs in one CS


ARGUMENTS

    legID: leg Id


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.splitleg (2);

NAME

    TSipCallSegment::moveleg


SYNOPSIS

    TInteger TSipCallSegment::moveleg(TInteger newLegID,TSipCallSegment 
    srcCS, TInteger srcLeg)


DESCRIPTION

    To move a leg from another CS to this CS


ARGUMENTS

    newLegID: the new leg id in this CS

    srcCS: another CS

    srcLeg: leg id in another CS


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipCallSegment cs2;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.moveleg(2,cs2,1);

NAME

    TSipCallSegment::geteventlegid


SYNOPSIS

    TInteger TSipCallSegment::geteventlegid()


DESCRIPTION

    To get the leg ID related to this event


ARGUMENTS

    ÎÞ

RETURN

    1 for calling party, 2 for called party


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.geteventlegid();

NAME

    TSipCallSegment::geterrorcase


SYNOPSIS

    TInteger TSipCallSegment::geterrorcase()


DESCRIPTION

    To get the error case. This function is used for exception processing 
    logic for synchronous etc(), pa(), pc(), pr()


ARGUMENTS

    ÎÞ

RETURN

    0: Normal
    1: Default error
    2: ETC failure
    3: Time out
    4: Collecting digits failure
    5: Playing announcement failure
    6: Recording failure


EXAMPLES

    var TSipCallSegment cs;
    var TSipMsg req;
    ...
    cs = req.createcallsegment();
    cs.geterrorcase ();

NAME

    TSipCallSegment::asynvxml


SYNOPSIS

    TInteger TSipCallSegment::asynvxml(TString url)


DESCRIPTION

    Asynchronous executing the VXML script


ARGUMENTS

    url: url of the VXML script


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    vxmlUrl TString
    
    cs.asynvxml (vxmlUrl);

NAME

    TSipCallSegment::onvxml


SYNOPSIS

    TInteger TSipCallSegment::onvxml([eventProcessLabel])


DESCRIPTION

    To set the event processing entry for finishing the VXML executing


ARGUMENTS

    eventProcessLabel: event processing logic label name


RETURN

    1 for success, 0 for failure


NAME

    TSipCallSegment::getvxmlrescode


SYNOPSIS

    TInteger TSipCallSegment::getvxmlrescode( )


DESCRIPTION

    To get the response code of the VXML operation


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipCallSegment::hold


SYNOPSIS

    TInteger TSipCallSegment::hold(TInteger legID=1)


DESCRIPTION

    To hole a call


ARGUMENTS

    legID: leg ID, default is 1


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    ...
    cs.hold (1);

NAME

    TSipCallSegment::gettransfernum


SYNOPSIS

    TString TSipCallSegment::gettransfernum()


DESCRIPTION

    To get the call transfer number (valid if the transfer type is 1)


ARGUMENTS

    ÎÞ

RETURN

    call transfer number


EXAMPLES

    var TSipCallSegment cs;
    var TString s;
    s = cs.gettransfernum();

NAME

    TSipCallSegment::gettransferurl


SYNOPSIS

    TString TSipCallSegment::gettransferurl()


DESCRIPTION

    To get the call transfer URL (valid if the transfer type is 2)


ARGUMENTS

    ÎÞ

RETURN

    call transfer URL


EXAMPLES

    var TSipCallSegment cs;
    var TString s;
    s = cs.gettransferurl();

NAME

    TSipCallSegment::gettransfertype


SYNOPSIS

    TInteger TSipCallSegment::gettransfertype()


DESCRIPTION

    To get the call transfer type


ARGUMENTS

    ÎÞ

RETURN

    call transfer type (1: intendment 2: attendant)


EXAMPLES

    var TSipCallSegment cs;
    var TInteger i;
    i = cs.gettransfertype();

NAME

    TSipCallSegment::gettransferreplaces


SYNOPSIS

    TString TSipCallSegment::gettransferreplaces()


DESCRIPTION

    To get the "Replaces" field from the message for call transfer


ARGUMENTS

    ÎÞ

RETURN

    value of the "Replaces" field


EXAMPLES

    var TSipCallSegment cs;
    var TString s;
    s = cs.gettransferreplaces();

NAME

    TSipCallSegment::transfernotify


SYNOPSIS

    TInteger TSipCallSegment::transfernotify(TInteger legID, TInteger resCode)
    


DESCRIPTION

    To notify for call transfer


ARGUMENTS

    legID: legID

    resCode: response code


RETURN

    1 for success, 0 for failure


EXAMPLES

    var TSipCallSegment cs;
    cs.onvtransfernotify (1,200);

NAME

    TSipCallSegment::replaces


SYNOPSIS

    TInteger TSipCallSegment::replaces(TString url, TString calling, TString 
    called, TString a)


DESCRIPTION

    replaces operation


ARGUMENTS

    url: URL for replaces

    calling: calling party number

    called: called party number

    a: replacesÍ·×Ô¶¯


RETURN

    1 for success, 0 for failure


NAME

    TSipCallSegment::getcalllegidentify


SYNOPSIS

    TString TSipCallSegment::getcalllegidentify(TInteger legID)


DESCRIPTION

    To get the identify of a leg


ARGUMENTS

    legID: legId


RETURN

    identify string


NAME

    TSipCallSegment::process


SYNOPSIS

    TInteger TSipCallSegment::process(TInteger resCode, TInteger relFlag)
    


DESCRIPTION

    To send a response to the calling leg


ARGUMENTS

    resCode: response code to send

    relFlag: 


RETURN

    


EXAMPLES

    void main(TSipMsg req)
    {
       var TsipCallSegment cs;
       cs = req.createcallsegment();
       cs.process (183,0); // send a 183 response to calling party
       ...
    }

NAME

    TSipCallSegment::jc, TSipCallSegment::unjc


SYNOPSIS

    TInteger TSipCallSegment::jc(TString conf, TInteger mode, TString type=
    '')
    TInteger TSipCallSegment::unjc()


DESCRIPTION

    This CS join or unjoin a conference


ARGUMENTS

    conf: conference ID

    mode: 0 for duplex, 1 for single

    type: conference type, default is null string


RETURN

    


NAME

    TSipCallSegment::getonfailrescode


SYNOPSIS

    TInteger TSipCallSegment::getonfailrescode()


DESCRIPTION

    To get the response code for events such as onfail(), onnoanswer() or 
    onbusy()


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipCallSegment::setprivateheader, TSipCallSegment::getprivateheader

    

SYNOPSIS

    TInteger TSipCallSegment::setprivateheader(TString name, TString value)
    
    TString TSipCallSegment::getprivateheader(TString name)


DESCRIPTION

    To set or get some special field value of the SIP message for this CS

    

ARGUMENTS

    name: field name

    value: field value


RETURN

    


NAME

    TSipCallSegment::getrelatedid


SYNOPSIS

    TString TSipCallSegment::getrelatedid()


DESCRIPTION

    To get the related CS ID


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipCallSegment::redirect


SYNOPSIS

    TInteger TSipCallSegment::redirect(TString url)


DESCRIPTION

    To redirect a call. 302 response will be sent to leg 1


ARGUMENTS

    url: the URL for redirecting


RETURN

    


NAME

    TSipCallSegment::onsessionrefresh


SYNOPSIS

    TInteger TSipCallSegment::onsessionrefresh([eventProcessLabel])


DESCRIPTION

    To set the event processing logic label for session refresh


ARGUMENTS

    eventProcessLabel: the event processing logic label


RETURN

    


NAME

    TSipCallSegment::getsessionrefreshholdflag, getsessionrefreshmethod

    

SYNOPSIS

    TInteger TSipCallSegment::getsessionrefreshholdflag()
    TString TSipCallSegment::getsessionrefreshmethod()


DESCRIPTION

    To get the hold flag or method name for session refresh event


ARGUMENTS

    ÎÞ

RETURN

    hold flag or method name


NAME

    TSipCallSegment::resetfsm


SYNOPSIS

    TInteger TSipCallSegment::resetfsm()


DESCRIPTION

    To set the FSM as the home FSM of this CS


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipCallSegment::addheader


SYNOPSIS

    TInteger TSipCallSegment::addheader(TString name, TString value)


DESCRIPTION

    To set some message header value for INVITE message to be sent


ARGUMENTS

    name: name of the message header

    value: value of the message header


RETURN

    1 for success, 0 for failure


NAME

    TSipCallSegment::waitoverlap


SYNOPSIS

    TString TSipCallSegment::waitoverlap(TInteger timer)


DESCRIPTION

    To wait the later arguments for overlap


ARGUMENTS

    timer: time to wait. If timeout, an exception generated


RETURN

    overlap value


NAME

    TSipConference::create


SYNOPSIS

    TInteger TSipConference::create(TInteger arg0, TInteger arg1)


DESCRIPTION

    To create a conference on the media server


ARGUMENTS

    arg0: Conference type. It must be 1

    arg1: Deletion condition. It must be 1


RETURN

    


NAME

    TSipConference::destroy


SYNOPSIS

    TInteger TSipConference::destroy()


DESCRIPTION

    To destory this conference on the media server


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipConference::getconferenceid


SYNOPSIS

    TString TSipConference::getconferenceid()


DESCRIPTION

    To get the identifier of this conference


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipConference::pa, asynpa, pr, asynpr


SYNOPSIS

    TInteger TSipConference::pa(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TInteger timer=
    60)
    TInteger TSipConference::asynpa(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval)
    TInteger TSipConference::pr(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TString endDigit,
     TInteger duration, TString fileName, TString fileFormat, TInteger dupTreat,
     TInteger timer=60)
    TInteger TSipConference::asynpr(TString msgIDBase, TString msgID, TInteger 
    type, TString varPart, TInteger repeat, TInteger interval, TString endDigit,
     TInteger duration, TString fileName, TString fileFormat, TInteger dupTreat)
    


DESCRIPTION

    To play announcement or do recording on this conference


ARGUMENTS

    msgIDBase: message id base number

    msgID: message id. It can be a number string or a filename. It will 
    be null if the mode is TTS

    type: message type:
    0: fix announcement
    1: integer
    2: number
    3: time. The format is HHMM
    4: date. The format is YYYYMMDD
    5: price. The format is an integer that the unit is the smmallest unit 
    of the currency
    6: time duration, The format is an integer that the unit is second
    7: text for TTS
    8: number for DTMF playing
    9: number for FSK playing
    10: fax sending

    varPart: content of the variable part:
    - For TTS, the text content
    - For fix announcement of fax, null string
    - Fot other, default is for chinese. If using other language, the format 
    is "lang-value-subtype". For example: "eng-12833-gen", "chi-1234-ord"
    

    repeat: repetation number

    interval: interval between the repetation

    timer: time out, default is 60 seconds

    endDigit: end digits for recording

    duration: max duration for recording

    fileName: file name for recording

    fileFormat: file format for recording. It can be:
    - audio/wav
    - audio/x-wav
    - audio/vnd.wave;codec=x, x=1:PCM, 6:G711a, 7:G711u, 83:G729, 8C:Convedia 
    G729c
    - video/quicktime;Codecs="h263,ulaw"

    dupTreat: duplicate file name treatment for recording (0: replace; 1:
     append)


RETURN

    


NAME

    TSipConference::cancel


SYNOPSIS

    TInteger TSipConference::cancel()


DESCRIPTION

    To cancel the pa or pr operation that is running


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TSipConference::onpa, onpr


SYNOPSIS

    TInteger TSipConference::onpa([eventProcessLabel])


DESCRIPTION

    To set the event processing logic label for asynchronous pa or pc


ARGUMENTS

    eventProcessLabel: Event processing logic label


RETURN

    


NAME

    TSipConference::setmsname


SYNOPSIS

    TInteger TSipConference::setmsname(TString msname)


DESCRIPTION

    To set the media server name to create the conference


ARGUMENTS

    msname: The name of the media server. The value must be configured in 
    msconfig


RETURN

    


NAME

    TTCAPDialogue::getdlgid


SYNOPSIS

    TInteger TTCAPDialogue::getdlgid()


DESCRIPTION

    To get the dialogue ID of this TTCAPDialogue object


ARGUMENTS

    ÎÞ

RETURN

    The dialogue ID integer


NAME

    TTCAPDialogue::getacname, TTCAPDialogue::setacname


SYNOPSIS

    TString TTCAPDialogue::getacname()
    TInteger TTCAPDialogue::setacname(TString ascACName)


DESCRIPTION

    getacname() is to get the application context name, and setacname() 
    is to set the application context name. Normally, getac() and setac()
     function is used, but for some strange application context while is 
    not configured in the config.ac getacname() and setacname is used for 
    sending TC-Begin or TC-Uni.


ARGUMENTS

    ascACName: An ASC string which is the encoded application name object 
    identifier.


RETURN

    getacname() returns the ASC string that the format is same as argument 
    ascACName. setacname() returns 0


EXAMPLES

    // for received the InitiDP operation of INAP
    void main(TTCAPDialogue d)
    {
       assert(d.getacname() == '03A37D0101010000');
    }

NAME

    TTCAPDialogue::getlpc, TTCAPDialogue::getrpc


SYNOPSIS

    TInteger TTCAPDialogue::getlpc()
    TInteger TTCAPDialogue::getrpc()


DESCRIPTION

    To get the local or remote SS7 point code for this dialogue. The point 
    code may be from the remote message or the local setting


ARGUMENTS

    ÎÞ

RETURN

    An integer for the point code


NAME

    TTCAPDialogue::getlssn, TTCAPDialogue::getrssn


SYNOPSIS

    TInteger TTCAPDialogue::getlssn()
    TInteger TTCAPDialogue::getrssn()


DESCRIPTION

    To get the local or remote SSN for this dialogue. The SSN may be from 
    the remote message or the local setting


ARGUMENTS

    ÎÞ

RETURN

    An integer for the SSN


NAME

    TTCAPDialogue::getlgtnumber, TTCAPDialogue::getrgtnumber


SYNOPSIS

    TString TTCAPDialogue::getlgtnumber()
    TString TTCAPDialogue::getrgtnumber()


DESCRIPTION

    To get the global title of local or remode site.


ARGUMENTS

    ÎÞ

RETURN

    The global title is ASC string. It is only the number, not includes 
    the global title head information.


NAME

    TTCAPDialogue::getlgthead, TTCAPDialogue::getrgthead


SYNOPSIS

    TInteger TTCAPDialogue::getlgthead(TInteger& tt, TInteger& np, TInteger&
     nai)
    TInteger TTCAPDialogue::getrgthead(TInteger& tt, TInteger& np, TInteger&
     nai)


DESCRIPTION

    To get the global title head information of local or remode site.


ARGUMENTS

    tt: integer reference. It returns the translation type. -1 is returned 
    if not existed

    np: integer reference. It returns the number plan. -1 is returned if 
    not existed

    nai: integer reference. It returns the nature of address indicator. 
    -1 is returned if not existed


RETURN

    Type of the GT head. 0 for no GT. 1 for NAI only, 2 for TT only, 3 for 
    TT and NP, 4 for TT, NP and NAI


NAME

    TTCAPDialogue::getcurprimitiveid


SYNOPSIS

    TInteger TTCAPDialogue::getcurprimitiveid()


DESCRIPTION

    To get the currently received primitive ID


ARGUMENTS

    ÎÞ

RETURN

    Primitive ID integer:
    0: tc-uni
    1: tc-begin
    2: tc-continue1
    3: tc-continue2
    4: tc-end
    5: tc-u-abort
    6: tc-p-abort
    9: tc-notice
    16: tc-invoke
    17: tc-result-nl
    18: tc-result-l
    19: tc-u-error
    20: tc-u-reject
    21: tc-l-cancel
    22: tc-u-cancel
    23: tc-l-reject
    24: tc-r-reject


NAME

    TTCAPDialogue::getcuropid


SYNOPSIS

    TInteger TTCAPDialogue::getcuropid()


DESCRIPTION

    To get the operation code that currently received


ARGUMENTS

    ÎÞ

RETURN

    Operation code integer


NAME

    TTCAPDialogue::getcurinvokeid


SYNOPSIS

    TInteger TTCAPDialogue::getcurinvokeid()


DESCRIPTION

    To get the invoke ID of the operation currently received. This invoke 
    ID can be used in the later functions to send ERROR or RESULT


ARGUMENTS

    ÎÞ

RETURN

    Invoke ID integer


NAME

    TTCAPDialogue::getasnobj


SYNOPSIS

    TASNObject TTCAPDialogue::getasnobj()


DESCRIPTION

    To get the TASNObject object that is the parameter of the operation 
    currently received. The operation parameter values can be got from the 
    TASNObject object


ARGUMENTS

    ÎÞ

RETURN

    handle of the TANSObject object


NAME

    TTCAPDialogue::appdlgid


SYNOPSIS

    TInteger TTCAPDialogue::appdlgid(TString destName='*')
    TInteger TTCAPDialogue::appdlgid(TInteger groupID)


DESCRIPTION

    To apply a dialogue ID from TCAP. The arguments can indicate which TCAP 
    to be used


ARGUMENTS

    destName: string. It's default value is '*'. If not '*', It is a name 
    of a DPC which can be found using configssp command of scf

    groupID: If there are no configuration for the DPC and name, a group 
    ID can be used. The group ID is a integer in the registation message 
    from TCAP process to scf process


RETURN

    The dialogue ID integer applied


NAME

    TTCAPDialogue::setac, TTCAPDialogue::getac


SYNOPSIS

    TInteger TTCAPDialogue::setac(TInteger acID)
    TInteger TTCAPDialogue::getac()


DESCRIPTION

    To get or set the application context of a dialogue


ARGUMENTS

    acID: integer. -2 for not using application contex. Other values can 
    be listed using ac command of scf


RETURN

    getac() returns -2 for no AC, and returns other values can be listed 
    using ac command of scf


NAME

    TTCAPDialogue::setladdr, TTCAPDialogue::setraddr


SYNOPSIS

    TInteger TTCAPDialogue::setladdr(TInteger ri, TInteger pc, TInteger 
    ssn, TInteger tt, TInteger np, TInteger nai, TString gt)
    TInteger TTCAPDialogue::setraddr(TInteger ri, TInteger pc, TInteger 
    ssn, TInteger tt, TInteger np, TInteger nai, TString gt)


DESCRIPTION

    To set local or remote address. According to the arguments, the system 
    can construct the encoded address


ARGUMENTS

    ri: Routing indicator integer. 0 for routing by GT, 1 for routing by 
    PC

    pc: Point code integer. -1 for null. Other positive integer is valid 
    point code value. It will be encoded to 14 bit format or 24 bit format 
    according the network environment

    ssn: Sub system number(SSN) integer, -1 for null. Other values is according 
    to the network configuration.

    tt: Translation type integer. -1 for null. 1-63 international service,
     128-254 for national network spesify

    np: Numbering plan integer. -1 for null. other values:
    1: ISDN/telephony numbering plan (ITU-T E.163 and E.164), 
    2: generic numbering plan, 3: data numbering plan (ITU-T X.121), 
    4: telex numbering plan (ITU-T F.69), 
    5: maritime mobile numbering plan (ITU-T E.210, E.211), 
    6: land mobile numbering plan (ITU-T E.212), 
    7: ISDN/mobile numbering plan (ITU-T E.214), 
    14: private network or network-specific numbering plan

    nai: Nature of address indicator integer. -1 for null. other values:
    
    1: subscriber number
    3: national significant number
    4: international number

    gt: ASC format GT number string, '' for null


RETURN

    0


EXAMPLES

    var TTCAPDialogue d;
    ...
    d.setraddr(1,258,12,-1,-1,-1,'');
    // For no GT
    // encode result: 43 02 01 00 0C
    
    d.setraddr(0,258,12,-1,-1,3,'12345');
    // Only NAI parameter in GT head
    // encode result: 07 02 01 00 0C 83 21 43 F5
    
    d.setraddr(0,258,12,1,1,-1,'12345');
    // TT and NP parameter in GT head
    // encode result: 0F 02 01 00 0C 01 11 21 43 F5
    
    d.setraddr(0,258,12,1,1,3,'12345');
    // TT, NP and NAI parameters in GT head
    // encode result: 13 02 01 00 0C 01 11 03 21 43 F5
    
    d.setraddr(0,-1,-1,1,1,3,'12345');
    // For no PC and SSN
    // encode result: 10 01 11 03 21 43 F5
    
    d.setraddr(0,258,12,1,1,3,'12345');
    // For 14 bit PC
    // encode result: 13 02 01 0C 01 11 03 21 43 F5

NAME

    TTCAPDialogue::unireq


SYNOPSIS

    TInteger TTCAPDialogue::unireq(TString userInfo='')


DESCRIPTION

    To send the UNIDIRECTIONAL request


ARGUMENTS

    userInfo: User information string. The default value is a null string

    

RETURN

    0


NAME

    TTCAPDialogue::beginreq


SYNOPSIS

    TInteger TTCAPDialogue::beginreq(TString userInfo='', TInteger type=
    0)


DESCRIPTION

    To send the BEGIN request


ARGUMENTS

    userInfo: User information string. The default value is a null string

    
    type: integer. The default value is 0 for normal BEGIN. 1 is for QueryWithPermition,
     2 is for QueryWithoutPermition


RETURN

    0


NAME

    TTCAPDialogue::continuereq


SYNOPSIS

    TInteger TTCAPDialogue::continuereq(TString userInfo='', TInteger type=
    0)


DESCRIPTION

    To send the CONTINUE request


ARGUMENTS

    userInfo: User information string. The default value is a null string

    
    type: integer. The default value is 0 for normal BEGIN. 1 is for ConversationWithPermition,
     2 is for ConversationWithoutPermition


RETURN

    0


NAME

    TTCAPDialogue::endreq


SYNOPSIS

    TInteger TTCAPDialogue::endreq(TString userInfo='', TInteger type=0)
    


DESCRIPTION

    To send the END request


ARGUMENTS

    userInfo: User information string. The default value is a null string

    
    type: integer. The default value is 0 for basic end, 1 is for Prearrange 
    End


RETURN

    0


NAME

    TTCAPDialogue::abortreq


SYNOPSIS

    TInteger TTCAPDialogue::abortreq(TString userInfo='', TInteger reason=
    0)


DESCRIPTION

    To send the U-ABORT request


ARGUMENTS

    userInfo: User information string. The default value is a null string

    
    reason: integer. The reason for ABORT. The default value is 0
    0: Unrecognized message type
    1: Unreconnized transaction ID
    2: Badly formatted transaction portion
    3: Incorrect transaction portion
    4: Transaction recource limitation


RETURN

    0


NAME

    TTCAPDialogue::invokereq


SYNOPSIS

    TInteger TTCAPDialogue::invokereq(TInteger opID, TInteger opType, TInteger 
    timeout, TString para, TInteger linkedid=-1)


DESCRIPTION

    To send the INVOKE request


ARGUMENTS

    opID: integer. The operation code of the operation to be sent

    opType: integer. The operation type:
    1: Both success and failure reported
    2: Only failure reported
    3: Only success reported
    4: Neither success nor failure reported

    timeout: integer, The timer of the operation to be sent. Its unit is 
    second

    papa: the ASC string that is the parameter of the error to be sent. 
    Its length must be even. For example '0330081010' indicates that the 
    parameter is 5 bytes: 30 03 80 01 01

    linkedID: integer. If this operation to be sent is the linked operation 
    of another operation received, this argument is the invoke ID of the 
    operation received. For example in INAP, If SRR is sent by calling this 
    function, this argument is the invoke id of PA received before


RETURN

    0


NAME

    TTCAPDialogue::resultreq


SYNOPSIS

    TInteger TTCAPDialogue::resultreq(TInteger invokeID, TInteger opID, 
    TString para='')


DESCRIPTION

    To send the RESULT-L request


ARGUMENTS

    invokeID: integer. The invoke ID of the operation received

    opID: integer, the operation code of the result to be sent

    papa: the ASC string that is the parameter of the error to be sent. 
    It's length must be even. For example '0330081010' indicates that the 
    parameter is 5 bytes: 30 03 80 01 01


RETURN

    0


NAME

    TTCAPDialogue::errorreq


SYNOPSIS

    TInteger TTCAPDialogue::errorreq(TInteger invokeID, TInteger errorID,
     TString para='')


DESCRIPTION

    To send the U-ERROR request


ARGUMENTS

    invokeID: integer. The invoke ID of the operation received

    errorID: integer. The error ID to be sent

    papa: the ASC string that is the parameter of the error to be sent. 
    It's length must be even. For example '0330081010' indicates that the 
    parameter is 5 bytes: 30 03 80 01 01


RETURN

    0


NAME

    TTCAPDialogue::rejectreq


SYNOPSIS

    TInteger TTCAPDialogue::rejectreq(TInteger invokeID, TInteger problemType,
     TInteger problemID)


DESCRIPTION

    To send the U-REJECT request


ARGUMENTS

    invokeID: integer. The invoke ID of the operation to reject

    problemType: integer. The problem type:
    0x80 for general problem
    0x81 for invoke problem
    0x82 for return result problem
    0x83 for return error problem

    problemID: integer. The problem ID
    IDs of problem type 0x80:
    - 0x00 for unrecognized component
    - 0x01 for mistype component
    - 0x02 badly structured component
    IDs of type 0x81:
    - 0x00 for duplicated invoke ID
    - 0x01 for unrecongnized operation
    - 0x02 for mistyped parameter
    - 0x03 for resource limitation
    - 0x04 for initiating release
    - 0x05 for unrongnized linked ID
    - 0x06 for linked response unexpected
    - 0x07 for unexpected linked operation
    IDs of problem type 0x82:
    - 0x00 for unrecognized invoke ID
    - 0x01 for return result unexpected
    - 0x02 for mistyped parameter
    IDs of problem type 0x83:
    - 0x00 for unrecognized invoke ID
    - 0x01 for return error unexpected
    - 0x02 for unrecongnized error
    - 0x03 for unexpected error
    - 0x04 for mistyped parameter


RETURN

    0


NAME

    TTCAPDialogue::waitlinked


SYNOPSIS

    TInteger TTCAPDialogue::waitlinked(TInteger timeOut=5, TInteger disableInt=
    1)


DESCRIPTION

    waitresult() is to synchronous wait the RESULT. This function is called 
    after calling the invokereq() and expecting the RESULT of the operation.
     For example in INAP, RESULT is expected after sending PC
    waitlinked() is to synchronous wait the linked INVOKE. This function 
    is called after calling the invokereq() and expecting the linked operation.
     For example in INAP, SRR is expected after sending PA


ARGUMENTS

    timeOut: integer. The timer for waiting. The unit is second. The default 
    value is 5 seconds.

    disableInt: integer. It is indicate whether disable the interrupt for 
    other event or not. The default value is 1 for disable


RETURN

    18 for received RESULT, 0 for received INVOKE and 1 for received ERROR

    

NAME

    TDiameter::getversion, TDiameter::setversion


SYNOPSIS

    TInteger TDiameter::getversion()
    TInteger TDiameter::setversion(TInteger ver)


DESCRIPTION

    To get or set the protocol version


ARGUMENTS

    ver: An integer protocol version code. Normally it is 1


RETURN

    


NAME

    TDiameter::getcommandcode, TDiameter::setcommandcode


SYNOPSIS

    TInteger TDiameter::getcommandcode()
    TInteger TDiameter::setcommandcode(TInteger code)


DESCRIPTION

    To get or set the command code


ARGUMENTS

    code: Command code. It can be:
    TDiameter::CapabilitiesExchange (257)
    TDiameter::ReAuth (258)
    TDiameter::Accounting (271)
    TDiameter::CreditControl (272)
    TDiameter::AbortSession (274)
    TDiameter::SessionTermination (275)
    TDiameter::DeviceWatchdog (280)
    TDiameter::DisconnectPeer (282)


RETURN

    


NAME

    TDiameter::getappid, TDiameter::setappid


SYNOPSIS

    TInteger TDiameter::getappid()
    TInteger TDiameter::setappid(TInteger id)


DESCRIPTION

    To get or set the application ID


ARGUMENTS

    id: application id, integer


RETURN

    


NAME

    TDiameter::getrflag, getpflag, geteflag, gettflag, setrflag, seteflag,
     setpflag, settflag


SYNOPSIS

    TInteger TDiameter::getrflag()
    TInteger TDiameter::getpflag()
    TInteger TDiameter::geteflag()
    TInteger TDiameter::gettflag()
    TInteger TDiameter::setrflag(TInteger flag)
    TInteger TDiameter::seteflag(TInteger flag)
    TInteger TDiameter::setpflag(TInteger flag)
    TInteger TDiameter::settflag(TInteger flag)


DESCRIPTION

    To get or set the command flag:
    getrflag() and setrflag() for R(equest) flag
    getpflag() and setpflag() for P(roxiable) flag
    geteflag() and geteflag() for E(rror) flag
    gettflag() and gettflag() for T(Potentially re-transmitted message) 
    flag


ARGUMENTS

    flag: 0 or 1, set the flag to 0 or 1


RETURN

    


NAME

    TDiameter::request


SYNOPSIS

    TInteger TDiameter::request()


DESCRIPTION

    To send the request message and wait the response of synchronous


ARGUMENTS

    ÎÞ

RETURN

    Error code


NAME

    TDiameter::response


SYNOPSIS

    TInteger TDiameter::response()


DESCRIPTION

    To send the response message. The response message can be sent using 
    this method of the request TDiameter object after setting some parameters

    

ARGUMENTS

    ÎÞ

RETURN

    Error code


NAME

    TDiameter::encode


SYNOPSIS

    TString TDiameter::encode(TInteger type=0 )


DESCRIPTION

    To encode the diameter message. This function is usually used for testing

    

ARGUMENTS

    type: The type of encoding, 0 is for request message. 1 is for response 
    message. The default value is 0


RETURN

    


NAME

    TDiameter::decode


SYNOPSIS

    TInteger TDiameter::decode(TString s)


DESCRIPTION

    To decode a diameter source message and reconstruct this TDiameter object.
     This function is usually used for testing


ARGUMENTS

    s: A binary diameter message string


RETURN

    


NAME

    TDiameter::setcontent


SYNOPSIS

    TInteger TDiameter::setcontent(TString s, TInteger length=0 )


DESCRIPTION

    To set the message content to encode


ARGUMENTS

    s: The content string

    length: The valid length. The default value is 0 for the whole string 
    length


RETURN

    


NAME

    TDiameter::getcontent


SYNOPSIS

    TString TDiameter::getcontent()


DESCRIPTION

    To get the source diameter message content


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TDiameter::getvalue


SYNOPSIS

    TString TDiameter::getvalue(tagpath, TString defaultValue)
    TInteger TDiameter::getvalue(tagpath, TInteger defaultValue)


DESCRIPTION

    To get an AVP value of the diameter message


ARGUMENTS

    tagpath: TagPath of the AVP

    defaultValue: Default value returned if the AVP is not existed


RETURN

    


NAME

    TDiameter::settimer


SYNOPSIS

    TInteger TDiameter::settimer(TInteger timer)


DESCRIPTION

    To set the timer for request message


ARGUMENTS

    timer: An integer in seconds


RETURN

    


NAME

    TDiameter::geterrno


SYNOPSIS

    TInteger TDiameter::geterrno( )


DESCRIPTION

    To get the current error code


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TDiameter::clearerrno


SYNOPSIS

    TInteger TDiameter::clearerrno( )


DESCRIPTION

    To clear the current error code


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TDiameter::getresultcode


SYNOPSIS

    TInteger TDiameter::getresultcode( )


DESCRIPTION

    To get the current result code


ARGUMENTS

    ÎÞ

RETURN

    Result code


NAME

    TDiameter::onrequest


SYNOPSIS

    TInteger TDiameter::onrequest([eventProcessLabel])


DESCRIPTION

    To set the request message event processing entry. A request object 
    may receive another request message ( such as RAR ). 


ARGUMENTS

    eventProcessLabel: The event processing logic label


RETURN

    


NAME

    getdiamsession


SYNOPSIS

    TString getdiamsession(TString host)


DESCRIPTION

    This function must be called to construct the session ID for TDiameter 
    client applications


ARGUMENTS

    host: It is the Origin-Host parameter


RETURN

    Session ID


NAME

    TRadius::getcommandcode


SYNOPSIS

    TInteger TRadius::getcommandcode()


DESCRIPTION

    To get the command code


ARGUMENTS

    ÎÞ

RETURN

    


NAME

    TRadius::setcommandcode


SYNOPSIS

    TInteger TRadius::setcommandcode(TInteger )


DESCRIPTION

    To set the command code before the message sending


ARGUMENTS

    arg1: command code


RETURN

    


NAME

    TRadius::getreqid, TRadius::setreqid


SYNOPSIS

    TInteger TRadius::getreqid() 
    TInteger TRadius::setreqid(TInteger reqID)


DESCRIPTION

    getreqid() is to get the request id. setreqid() is to set the request 
    id


ARGUMENTS

    reqID: request ID


RETURN

    


NAME

    TRadius::getauth


SYNOPSIS

    TString TRadius::getauth()
    TInteger TRadius::setauth(TString auth)


DESCRIPTION

    To get or set the authentication information


ARGUMENTS

    auth: authentication information. It must be 16 bytes string after md5 
    encryption


RETURN

    getauth() returns authentication information. It must be 16 bytes string 
    after md5 encryption


NAME

    TRadius::getcontent, setcontent


SYNOPSIS

    TString TRadius::getcontent()
    TInteger TRadius::setcontent(TString s, TInteger length=0)


DESCRIPTION

    setcontent() is to set the encoded content for the TRadius object
    getcontent() is to get the radius message content before decoding


ARGUMENTS

    s: the content string to set

    length: valid length, default is 0, 0 means the whole length of the 
    string


RETURN

    


NAME

    TRadius::encode


SYNOPSIS

    TString TRadius::encode()


DESCRIPTION

    To encode the radius message


ARGUMENTS

    ÎÞ

RETURN

    the returned string can be sent directly


EXAMPLES

    var TRadius r;
    var TString s, sr;
    r = new TRadius;
    r.setcommandcode(2);
    r.setid(10);
    r.setauth('1234567890123456'); // a string after md5 encryption
    r.setcontent(s); // s is constructed by xmlsib
    sr=r.encode();
    udpsend(argv0,atoi(argv1),sr); // send the messagae

NAME

    TRadius::decode


SYNOPSIS

    TInteger TRadius::decode(TString s)


DESCRIPTION

    To decode the radius message and reconstruct this TRadius object


ARGUMENTS

    s: radius message string


RETURN

    


NAME

    TRadius::getvalue


SYNOPSIS

    TString TRadius::getvalue(tagpath, TString defaultValue)
    TInteger TRadius::getvalue(tagpath, TInteger defaultValue)


DESCRIPTION

    To get a parameter value of a radius message


ARGUMENTS

    tagpath: the tagpath of the parameter

    defaultValue: the default value if the parameter is not existed


RETURN

    the integer or string value got


EXAMPLES

    var TRadius r = new TRadius();
    r.decode(s); // s a complete radius message from UDP
    
    // get the string parameter
    var TString s1=r.getvalue(<<radius.invoke.access-request.user-name>>
    ,'null');
    var TString s2=r.getvalue(<<radius.invoke.access-request.user-password>
    >,'null');
    var TString s3=r.getvalue(<<radius.invoke.access-request.nas-ip-address>
    >,'null');
    
    // get the integer parameter
    var TInteger i1=r.getvalue(<<radius.invoke.access-request.nas-port>>
    ,-1);
    
    // get one parameter array element
    var TString s5=r.getvalue(<<radius.invoke.access-request.framed-compression[
    1]>>,'null');
    var TString s6=r.getvalue(<<radius.invoke.access-request.framed-compression[
    2]>>,'null');
    
    // get parameter array elements number
    i2=r.getvalue(<<radius.invoke.access-request.framed-compression>>,0)
    ;

NAME

    TSCPTable::TSCPTable


SYNOPSIS

    TSCPTable::TSCPTable(TInteger row, TInteger col)


DESCRIPTION

    Constructor function, the two arguments indicate the initial size of 
    the table


ARGUMENTS

    row: number of rows

    col: number of columns


RETURN

    


EXAMPLES

    var TSCPTable t;
    t = new TSCPTable(2,3);

NAME

    TSCPTable[][]


SYNOPSIS

    TSCPTable[][]=TString
    TString=TSCPTable[][]


DESCRIPTION

    To set or get the value of a table element. Integers in bracket are 
    the index of rows and the index of columns. The first one is 1


ARGUMENTS

    ÎÞ

RETURN

    


EXAMPLES

    var TString s;
    var TSCPTable t;
    t = new TSCPTable(2,2);
    t[1][2] = 'aaaaa';
    s = t[1][2];

NAME

    TSCPTable::resize


SYNOPSIS

    TInteger TSCPTable::resize(TInteger row, TInteger col)


DESCRIPTION

    To change the size of a table. Normally, if you assign a value to an 
    element of the table, the table size can be automatically changed according 
    to the index. But you can use resize() first for better performance.

    

ARGUMENTS

    row: number of rows

    col: number of columns


RETURN

    0


EXAMPLES

    var TString s;
    var TSCPTable t;
    t = new TSCPTable(2,2);
    t.resize(10,10);

NAME

    TSCPTable::coltostr, TSCPTable::rowtostr


SYNOPSIS

    TString TSCPTable::coltostr(TInteger index,TString sep='|')
    TString TSCPTable::coltostr(TString colTitle,TString sep='|')
    TString TSCPTable::rowtostr(TInteger index,TString sep='|')


DESCRIPTION

    To convert a row or a column of a table to a string


ARGUMENTS

    index: row index or column index, first is 1

    colTital: name of column

    sep: separator character, default is '|'


RETURN

    The converted string


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    // 11  -   -   14
    // 21  -   -   -
    // 31  -   -   -
    assert(t.coltostr(1,'|') == '11|21|31');
    assert(t.rowtostr(1,'|') == '11|||14');

NAME

    TSCPTable::tostr


SYNOPSIS

    TString TSCPTable::tostr(TString rowsep=ENTER, TString colsep='|', TString 
    colFilter='')


DESCRIPTION

    To convert a table to a string


ARGUMENTS

    rowsep: separator between rows, default is ENTER

    colsep: separator between columns, default is '|'

    colFilter: colums filter, a string consisted by '0' or '1'. If the column 
    index is less than or equal to the filter string length and the position 
    is '0', the columns will be presented in the return string


RETURN

    converted string


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    print(t.tostr());
    ½«ÏÔÊ¾£º
    11|||14|
    21||||
    31||||
    print(t.tostr('\n','|','1000');
    ½«Ö»ÏÔÊ¾µÚÒ»ÁÐ£º
    11|
    21|
    31|

NAME

    TSCPTable::toxml, TSCPTable::toxml2


SYNOPSIS

    TString TSCPTable::toxml()
    TString TSCPTable::toxml2()


DESCRIPTION

    To convert a table to a xml string, XML string returned by toxml() includes 
    enter and indentation. XML string returned by toxml2() does not include 
    enter and indentation


ARGUMENTS

    ÎÞ

RETURN

    converted xml string


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    assert(t.toxml() ==
    '<table>
       <row>
          <col>11</col>
          <col></col>
          <col></col>
          <col>14</col>
       </row>
       <row>
          <col>21</col>
          <col></col>
          <col></col>
          <col></col>
       </row>
       <row>
          <col>31</col>
          <col></col>
          <col></col>
          <col></col>
       </row>
    </table>');
    
    assert(t.toxml2() ==
    '<table> <row><col>11</col><col></col><col></col><col>14</col></row>
     <row><col>21
    </col><col></col><col></col><col></col></row> <row><col>31</col><col>
    </col><col>
    </col><col></col></row></table>');

NAME

    TSCPTable::settitle, TSCPTable::cleartitle


SYNOPSIS

    TInteger TSCPTable::settitle(TInteger col,TString title)
    TInteger TSCPTable::cleartitle()


DESCRIPTION

    To set or unset the name of a column. If column names of a table is 
    set, the tag of converted xml string will be this name


ARGUMENTS

    col: column index, first is 1

    title: column name


RETURN

    0


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    t.settitle(1,'A');
    t.settitle(2,'B');
    t.settitle(3,'C');
    t.settitle(4,'D');
    assert(t.toxml2() ==
    '<table><record><A>11</A><B></B><C></C><D>14</D></record><record><A>
    21</A><B></B>
    <C></C><D></D></record><record><A>31</A><B></B><C></C><D></D></record>
    </table>');

NAME

    TSCPTable::rowcount, TSCPTable::colcount


SYNOPSIS

    TInteger TSCPTable::rowcount()
    TInteger TSCPTable::colcount()


DESCRIPTION

    To get the rows number and the columns number


ARGUMENTS

    ÎÞ

RETURN

    rows number or columns number


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    assert(t.rowcount() == 3);
    assert(t.colcount() == 4);

NAME

    TSCPTable::colname, TSCPTable::colid


SYNOPSIS

    TString TSCPTable::colname(TInteger colid)
    TInteger TSCPTable::colid(TString colname)


DESCRIPTION

    colname() is to get column name according to the column index. colid(
    ) is to get column index according to the column name


ARGUMENTS

    colid: column index

    colname: column name


RETURN

    returned column name or index


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    t.settitle(1,'A');
    t.settitle(2,'B');
    t.settitle(3,'C');
    t.settitle(4,'D');
    assert(t.colid('A') == 1);
    assert(t.colname(3) == 'C');

NAME

    TSCPTable::filter


SYNOPSIS

    TInteger TSCPTable::filter(TInteger col, TString pattern, TInteger mode=
    1)


DESCRIPTION

    To do a filter according to a column index and the condition pattern.
     The source table will not be destoried after the filter action. Only 
    a virtual table view is generated according to the filter condition. 
    After the filter, all actions will be done on the virtual table view.
    


ARGUMENTS

    col: column index to match the filter condition

    pattern: filter condition pattern. supporting wildcard such as '*' or 
    '?' like the function dosmatchpattern(). '*' is to undo all the filter 
    action if argument mode is 1

    mode: 1 is to select the matched rows and 0 is to select the unmatched 
    rows


RETURN

    0


EXAMPLES

    var TSCPTable t;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    t.settitle(1,'A');
    t.settitle(2,'B');
    t.settitle(3,'C');
    t.settitle(4,'D');
    
    // select the rows that first column is begin with '1'
    t.filter(1,'1*');
    assert(t.toxml2() ==
    '<table><record><A>11</A><B></B><C></C><D>14</D></record></table>');
    
    
    // undo the filter action
    t.filter(1,'*');
    assert(t.toxml2() ==
    '<table><record><A>11</A><B></B><C></C><D>14</D></record><record><A>
    21</A><B></B>
    <C></C><D></D></record><record><A>31</A><B></B><C></C><D></D></record>
    </table>');
    
    // select the rows that first column is not begin with '1'
    t.filter(1, '1*', 0);
    assert(t.toxml2() ==
    '<table><record><A>21</A><B></B><C></C><D></D></record><record><A>31<
    /A><B></B>
    <C></C><D></D></record></table>');

NAME

    TSCPTable::orderby


SYNOPSIS

    TInteger TSCPTable::orderby(TInteger col, TInteger mode=0)


DESCRIPTION

    To sort according to the specified column


ARGUMENTS

    col: column index to sort

    mode: sort mode. 0 for string comparison and 1 for integer comparison.
     default is 0


RETURN

    0


NAME

    TSCPTable::diffbycol


SYNOPSIS

    TSCPTable TSCPTable::diffbycol(TSCPTable table2, TInteger col1, TInteger 
    col2)


DESCRIPTION

    To compare a column with a column of another table


ARGUMENTS

    table2: the handle of another table

    col1: self column index

    col2: another table column index


RETURN

    comparison result. It is a new table which has only one column include 
    the different rows of the two comparison columns. 


EXAMPLES

    var TSCPTable t, t2, t3;
    t=new TSCPTable(3,4);
    t[1][1]='11';
    t[2][1]='21';
    t[3][1]='31';
    t[1][4]='14';
    t2=new TSCPTable(2,2);
    t2[2][1]='21';
    t3=t.diffbycol(t2,1,1);
    assert(t3.tostr('|') == '11|31');

NAME

    TCommandLine::argc


SYNOPSIS

    TInteger TCommandLine::argc()


DESCRIPTION

    To get the argument number for TCommandLine object


ARGUMENTS

    ÎÞ

RETURN

    number of argument


EXAMPLES

    void main(TCommandLine cmd)
    {
       print(itoa(cmd.argc()));  // display the argument number
    }

NAME

    TCommandLine::argv


SYNOPSIS

    TString TCommandLine::argv(TInteger index=-1)


DESCRIPTION

    To get the value of argument for TCommandLine object


ARGUMENTS

    index: index of argument, -1 for whole message, other (0-29) for one 
    specified argument


RETURN

    the argument, type is TString


EXAMPLES

    void main(TCommandLine cmd)
    {
       var TInteger i;
       print(cmd.argv()); // display the whole message
       for(i=0; i<cmd.argc(); i=i+1)
          print(cmd.argv(i));  // display each argument
    }

NAME

    TCommandLine::getarg


SYNOPSIS

    TString[] TCommandLine::getarg()


DESCRIPTION

    ·µ»ØTCommandLine¶ÔÏó²ÎÊý


ARGUMENTS

    ÎÞ

RETURN

    TCommandLine¶ÔÏó²ÎÊý,TString[]


EXAMPLES

    void main(TCommandLine cmd)
    {
       var TString args[];
       args=cmd.getarg();
       print(args[1]);
    }

NAME

    TCommandLine::getxmltree


SYNOPSIS

    TXMLTree TCommandLine::getxmltree()


DESCRIPTION

    The TCommandLine object generated by the serviceEvent object may have 
    a xml tree parsed from the message body. This function can get the xml 
    object from the TComandLine object.
    This xml tree cannot be deleted using delete function.


ARGUMENTS

    ÎÞ

RETURN

    handle of the xml tree object


EXAMPLES

    var TXMLTree x;
    on(serviceEvent, TCommandLine cmd)
    {
       x=cmd.getxmltree();
       print(x.tostr());
    }

NAME

    TCommandLine::getinesobj


SYNOPSIS

    TINESObj TCommandLine::getinesobj()


DESCRIPTION

    If a sub service logic is invoked by INES or other FSM, a TCOmmandLine 
    object may be as the parameter of main() function. Thus the sub service 
    logic can use this function to get the TINESObj object from the TCommandLine 
    object and can return messages using this TINESobj object.
    The TINESObj object cannot be deleted using delete function


ARGUMENTS

    ÎÞ

RETURN

    handle of the TINESObj object


EXAMPLES

    void main(TCommandLine cmd)
    {
       var TINESObj i;
       i=cmd.getinesobj();
       i.synctofsm('serviceevent a b');
       ...
    }

NAME

    the-end
